{
  "address": "0x0Ac6Bb3095c62706D8EDd0B9185bCCFB16cDE117",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_implementation",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_donationTokenAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "CreateFundingContractFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC1167FailedCreateClone",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FundingForNewContractTooSmall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidFee",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoFundsToWithdraw",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WithdrawalFailed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newFee",
          "type": "uint256"
        }
      ],
      "name": "FundingFeeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "FundsWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "contractDetailsId",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "title",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "category",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "goal",
          "type": "uint256"
        }
      ],
      "name": "NewCrowdFundingContractCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_contractDetailsId",
          "type": "string"
        },
        {
          "internalType": "enum CrowdFundingFactory.Category",
          "name": "_category",
          "type": "uint8"
        },
        {
          "internalType": "string",
          "name": "_title",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_goal",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_duration",
          "type": "uint256"
        }
      ],
      "name": "createNewCrowdFundingContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "donationToken",
      "outputs": [
        {
          "internalType": "contract CrowdFundingToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDeployedCrowdFundingContracts",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFundingFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newFee",
          "type": "uint256"
        }
      ],
      "name": "setFundingFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x22fe1e0d42cc784e62123ae151aa0cefe87cd258b9ea0580d3171da2fc43618c",
  "receipt": {
    "to": null,
    "from": "0x40BDC27880A522B4346844A96aDAB92DcEDB1664",
    "contractAddress": "0x0Ac6Bb3095c62706D8EDd0B9185bCCFB16cDE117",
    "transactionIndex": 1,
    "gasUsed": "1298493",
    "logsBloom": "0x
    "blockHash": "0x24e3ac13e4cc768abcdef13e598abfdd7681c4a9f78ec373a6cde3dc26b5d302",
    "transactionHash": "0x22fe1e0d42cc784e62123ae151aa0cefe87cd258b9ea0580d3171da2fc43618c",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 47606827,
        "transactionHash": "0x22fe1e0d42cc784e62123ae151aa0cefe87cd258b9ea0580d3171da2fc43618c",
        "address": "0x0Ac6Bb3095c62706D8EDd0B9185bCCFB16cDE117",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000040bdc27880a522b4346844a96adab92dcedb1664"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x24e3ac13e4cc768abcdef13e598abfdd7681c4a9f78ec373a6cde3dc26b5d302"
      }
    ],
    "blockNumber": 47606827,
    "cumulativeGasUsed": "1390626",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x7f8A17c30bc4Fd9AEd732b3264ababee9a4e100E",
    "0x4da61e7341C0a0A532a1C4F49BE10Fb21a165927"
  ],
  "numDeployments": 1,
  "solcInputHash": "fc4d881b10f55382ed55e41e9c4583b5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_implementation\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_donationTokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"CreateFundingContractFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC1167FailedCreateClone\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FundingForNewContractTooSmall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidFee\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoFundsToWithdraw\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WithdrawalFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"FundingFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FundsWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"contractDetailsId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"category\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"goal\",\"type\":\"uint256\"}],\"name\":\"NewCrowdFundingContractCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_contractDetailsId\",\"type\":\"string\"},{\"internalType\":\"enum CrowdFundingFactory.Category\",\"name\":\"_category\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"_title\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_goal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"createNewCrowdFundingContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"donationToken\",\"outputs\":[{\"internalType\":\"contract CrowdFundingToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDeployedCrowdFundingContracts\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFundingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newFee\",\"type\":\"uint256\"}],\"name\":\"setFundingFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"Factory contract for creating new crowdfunding campaigns\",\"errors\":{\"ERC1167FailedCreateClone()\":[{\"details\":\"A clone instance deployment failed.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"CrowdFundingFactory\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CrowdFundingFactory.sol\":\"CrowdFundingFactory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/Clones.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n */\\nlibrary Clones {\\n    /**\\n     * @dev A clone instance deployment failed.\\n     */\\n    error ERC1167FailedCreateClone();\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create(0, 0x09, 0x37)\\n        }\\n        if (instance == address(0)) {\\n            revert ERC1167FailedCreateClone();\\n        }\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create2(0, 0x09, 0x37, salt)\\n        }\\n        if (instance == address(0)) {\\n            revert ERC1167FailedCreateClone();\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(add(ptr, 0x38), deployer)\\n            mstore(add(ptr, 0x24), 0x5af43d82803e903d91602b57fd5bf3ff)\\n            mstore(add(ptr, 0x14), implementation)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73)\\n            mstore(add(ptr, 0x58), salt)\\n            mstore(add(ptr, 0x78), keccak256(add(ptr, 0x0c), 0x37))\\n            predicted := keccak256(add(ptr, 0x43), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt\\n    ) internal view returns (address predicted) {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xd18408af8a91bedb3d56343eeb9b30eb852e6dea93a5e2d5c6db9ca4cb905155\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"./extensions/IERC20Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {IERC20Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n */\\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\\n    mapping(address account => uint256) private _balances;\\n\\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `value`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `value`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `value`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\n     * this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            _totalSupply += value;\\n        } else {\\n            uint256 fromBalance = _balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                _balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                _totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                _balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n     * Relies on the `_update` mechanism\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\n     * Relies on the `_update` mechanism.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\n     * `Approval` event during `transferFrom` operations.\\n     *\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\n     * true using the following override:\\n     * ```\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * ```\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        _allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Does not emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3e1fa9d1987f8d349dfb4d6fe93bf2ca014b52ba335cfac30bfe71e357e6f80\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/ERC20Burnable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ERC20} from \\\"../ERC20.sol\\\";\\nimport {Context} from \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    /**\\n     * @dev Destroys a `value` amount of tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 value) public virtual {\\n        _burn(_msgSender(), value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, deducting from\\n     * the caller's allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `value`.\\n     */\\n    function burnFrom(address account, uint256 value) public virtual {\\n        _spendAllowance(account, _msgSender(), value);\\n        _burn(account, value);\\n    }\\n}\\n\",\"keccak256\":\"0x2659248df25e34000ed214b3dc8da2160bc39874c992b477d9e2b1b3283dc073\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"contracts/CrowdFundingFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./CrowdFundingToken.sol\\\";\\n/**\\n * @title CrowdFundingFactory\\n * @dev Factory contract for creating new crowdfunding campaigns\\n */\\ncontract CrowdFundingFactory is Ownable {\\n    event NewCrowdFundingContractCreated(\\n        address indexed owner,\\n        address indexed contractAddress, \\n        string contractDetailsId,\\n        string title,\\n        uint8 category,\\n        uint256 duration,\\n        uint256 goal\\n    );\\n    event FundingFeeUpdated(uint256 oldFee, uint256 newFee);\\n    event FundsWithdrawn(address indexed owner, uint256 amount);\\n\\n    // Errors\\n    error FundingForNewContractTooSmall();\\n    error CreateFundingContractFailed();\\n    error WithdrawalFailed();\\n    error InvalidFee();   \\n    error NoFundsToWithdraw();\\n\\n    // State variables\\n    address private immutable CROWDFUNDING_IMPLEMENTATION;\\n    address[] private deployedCrowdFundingContracts;\\n    address private crowdFundingToken;\\n    uint256 private fundingFee = 0.000000001 ether;\\n    CrowdFundingToken public donationToken;\\n\\n     enum Category {\\n        TECHNOLOGY,\\n        ARTS,\\n        COMMUNITY,\\n        EDUCATION,\\n        ENVIRONMENT,\\n        HEALTH,\\n        SOCIAL,\\n        CHARITY,\\n        OTHER\\n    }\\n\\n\\n    constructor(address _implementation, address _donationTokenAddress) Ownable(msg.sender) {\\n        require(_implementation != address(0), \\\"Invalid implementation address\\\");\\n        CROWDFUNDING_IMPLEMENTATION = _implementation;\\n        donationToken = CrowdFundingToken(_donationTokenAddress);\\n    }\\n\\n    function createNewCrowdFundingContract(\\n        string memory _contractDetailsId,\\n        Category _category,\\n        string memory _title,\\n        uint256 _goal,\\n        uint256 _duration\\n    ) external payable returns (address) {\\n        // Add input validation\\n        require(bytes(_contractDetailsId).length > 0, \\\"Empty contract details ID\\\");\\n        require(bytes(_title).length > 0, \\\"Empty title\\\");\\n        require(_goal > 0, \\\"Goal must be greater than 0\\\");\\n        require(_duration > 0, \\\"Duration must be greater than 0\\\");\\n\\n        if (msg.value < fundingFee) {\\n            revert FundingForNewContractTooSmall();\\n        }\\n\\n        address clone = Clones.clone(CROWDFUNDING_IMPLEMENTATION);\\n        \\n        // Move initialization parameters to a separate variable for better readability\\n        bytes memory initData = abi.encodeWithSignature(\\n            \\\"initialize(string,string,uint8,uint256,uint256,address,address)\\\",\\n            _contractDetailsId,\\n            _title,\\n            uint8(_category),\\n            _goal,\\n            _duration,\\n            address(this),\\n            address(donationToken)\\n        );\\n\\n        (bool success, ) = clone.call(initData);\\n        if (!success) {\\n            revert CreateFundingContractFailed();\\n        }\\n\\n        deployedCrowdFundingContracts.push(clone);\\n\\n        donationToken.addCrowdfundingContract(clone);\\n        \\n        emit NewCrowdFundingContractCreated(\\n            msg.sender,\\n            clone,\\n            _contractDetailsId,\\n            _title,\\n            uint8(_category),\\n            _duration,\\n            _goal\\n        );\\n        \\n        return clone;\\n    }\\n\\n    function setFundingFee(uint256 _newFee) external onlyOwner {\\n        // Add validation for new fee\\n        if (_newFee > 1 ether) revert InvalidFee();\\n        uint256 oldFee = fundingFee;\\n        fundingFee = _newFee;\\n        emit FundingFeeUpdated(oldFee, _newFee);\\n    }\\n\\n    function withdrawFunds() external onlyOwner {\\n        uint256 balance = address(this).balance;\\n        if (balance == 0) revert NoFundsToWithdraw();\\n\\n        (bool success, ) = owner().call{value: balance}(\\\"\\\");\\n        if (!success) {\\n            revert WithdrawalFailed();\\n        }\\n        \\n        emit FundsWithdrawn(owner(), balance);\\n    }\\n\\n    // View functions\\n    function getDeployedCrowdFundingContracts() external view returns (address[] memory) {\\n        return deployedCrowdFundingContracts;\\n    }\\n\\n    function getFundingFee() external view returns (uint256) {\\n        return fundingFee;\\n    }\\n\\n    function getBalance() external view returns (uint256) {\\n        return address(this).balance;\\n    }\\n\\n    receive() external payable {}\\n} \",\"keccak256\":\"0xd43e1862645f7b6d5ac44d310225a797723188f1db400bd379185f4db9f50d24\",\"license\":\"MIT\"},\"contracts/CrowdFundingToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract CrowdFundingToken is ERC20, ERC20Burnable, Ownable {\\n    mapping(address => bool) public crowdfundingContracts;\\n\\n    constructor() ERC20(\\\"Donation Token\\\", \\\"DNTN\\\") Ownable(msg.sender) {}\\n\\n    // Initially owned by deployer\\n\\n    function setFactoryAndTransferOwnership(\\n        address _factoryAddress\\n    ) external onlyOwner {\\n        require(_factoryAddress != address(0), \\\"Invalid factory address\\\");\\n        crowdfundingContracts[_factoryAddress] = true;\\n        _transferOwnership(_factoryAddress);\\n    }\\n\\n    function addCrowdfundingContract(address _contract) external onlyOwner {\\n        crowdfundingContracts[_contract] = true;\\n    }\\n\\n    function mint(address to, uint256 amount) external {\\n        require(\\n            crowdfundingContracts[msg.sender],\\n            \\\"Only crowdfunding contracts can mint\\\"\\n        );\\n        _mint(to, amount);\\n    }\\n\\n    function burnTokens(uint256 amount, address from) external {\\n        require(\\n            crowdfundingContracts[msg.sender],\\n            \\\"Only crowdfunding contracts can burn\\\"\\n        );\\n        _burn(from, amount);\\n    }\\n}\\n\",\"keccak256\":\"0xf723ab5a93544415565752ee735b0e2c8ca2889421e71eff2b979f2cada84b0c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a0604052633b9aca006003553480156200001957600080fd5b50604051620019163803806200191683398181016040528101906200003f9190620002e4565b33600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603620000b55760006040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401620000ac91906200033c565b60405180910390fd5b620000c681620001b660201b60201c565b50600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160362000139576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200013090620003ba565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff168152505080600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050620003dc565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620002ac826200027f565b9050919050565b620002be816200029f565b8114620002ca57600080fd5b50565b600081519050620002de81620002b3565b92915050565b60008060408385031215620002fe57620002fd6200027a565b5b60006200030e85828601620002cd565b92505060206200032185828601620002cd565b9150509250929050565b62000336816200029f565b82525050565b60006020820190506200035360008301846200032b565b92915050565b600082825260208201905092915050565b7f496e76616c696420696d706c656d656e746174696f6e20616464726573730000600082015250565b6000620003a2601e8362000359565b9150620003af826200036a565b602082019050919050565b60006020820190508181036000830152620003d58162000393565b9050919050565b60805161151e620003f8600039600061065c015261151e6000f3fe6080604052600436106100955760003560e01c80638da5cb5b116100595780638da5cb5b14610150578063ae3063191461017b578063b4be88f3146101a4578063cb5e02f5146101cf578063f2fde38b146101ff5761009c565b80630df72159146100a157806312065fe0146100cc57806324600fc3146100f75780633a88cc851461010e578063715018a6146101395761009c565b3661009c57005b600080fd5b3480156100ad57600080fd5b506100b6610228565b6040516100c39190610c7f565b60405180910390f35b3480156100d857600080fd5b506100e161024e565b6040516100ee9190610cb3565b60405180910390f35b34801561010357600080fd5b5061010c610256565b005b34801561011a57600080fd5b506101236103a0565b6040516101309190610cb3565b60405180910390f35b34801561014557600080fd5b5061014e6103aa565b005b34801561015c57600080fd5b506101656103be565b6040516101729190610cef565b60405180910390f35b34801561018757600080fd5b506101a2600480360381019061019d9190610d4a565b6103e7565b005b3480156101b057600080fd5b506101b961047c565b6040516101c69190610e35565b60405180910390f35b6101e960048036038101906101e49190610fc2565b61050a565b6040516101f69190610cef565b60405180910390f35b34801561020b57600080fd5b50610226600480360381019061022191906110a1565b610976565b005b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600047905090565b61025e6109fc565b60004790506000810361029d576040517f67e3990d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006102a76103be565b73ffffffffffffffffffffffffffffffffffffffff16826040516102ca906110ff565b60006040518083038185875af1925050503d8060008114610307576040519150601f19603f3d011682016040523d82523d6000602084013e61030c565b606091505b5050905080610347576040517f27fcd9d100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61034f6103be565b73ffffffffffffffffffffffffffffffffffffffff167feaff4b37086828766ad3268786972c0cd24259d4c87a80f9d3963a3c3d999b0d836040516103949190610cb3565b60405180910390a25050565b6000600354905090565b6103b26109fc565b6103bc6000610a83565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6103ef6109fc565b670de0b6b3a7640000811115610431576040517f58d620b300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006003549050816003819055507fb2743902575ffdab882dfa43a3501f82fbbefa0d2c637e393aed1e80e2cb840b8183604051610470929190611114565b60405180910390a15050565b6060600180548060200260200160405190810160405280929190818152602001828054801561050057602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116104b6575b5050505050905090565b60008086511161054f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105469061119a565b60405180910390fd5b6000845111610593576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161058a90611206565b60405180910390fd5b600083116105d6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105cd90611272565b60405180910390fd5b60008211610619576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610610906112de565b60405180910390fd5b600354341015610655576040517fcd0db44200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006106807f0000000000000000000000000000000000000000000000000000000000000000610b47565b905060008786886008811115610699576106986112fe565b5b878730600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040516024016106d597969594939291906113b7565b6040516020818303038152906040527f561cf2ab000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050905060008273ffffffffffffffffffffffffffffffffffffffff168260405161077b9190611470565b6000604051808303816000865af19150503d80600081146107b8576040519150601f19603f3d011682016040523d82523d6000602084013e6107bd565b606091505b50509050806107f8576040517fcba601e300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001839080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639851967c846040518263ffffffff1660e01b81526004016108b69190610cef565b600060405180830381600087803b1580156108d057600080fd5b505af11580156108e4573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fff1332e9603156064c04f8155bf5371aaa2e993afb3ca17a7c2f2ef582a6c0738b8a8c600881111561094c5761094b6112fe565b5b8a8c60405161095f959493929190611487565b60405180910390a382935050505095945050505050565b61097e6109fc565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036109f05760006040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016109e79190610cef565b60405180910390fd5b6109f981610a83565b50565b610a04610bf8565b73ffffffffffffffffffffffffffffffffffffffff16610a226103be565b73ffffffffffffffffffffffffffffffffffffffff1614610a8157610a45610bf8565b6040517f118cdaa7000000000000000000000000000000000000000000000000000000008152600401610a789190610cef565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000763d602d80600a3d3981f3363d3d373d3d3d363d730000008260601b60e81c176000526e5af43d82803e903d91602b57fd5bf38260781b17602052603760096000f09050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610bf3576040517fc2f868f400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b919050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610c45610c40610c3b84610c00565b610c20565b610c00565b9050919050565b6000610c5782610c2a565b9050919050565b6000610c6982610c4c565b9050919050565b610c7981610c5e565b82525050565b6000602082019050610c946000830184610c70565b92915050565b6000819050919050565b610cad81610c9a565b82525050565b6000602082019050610cc86000830184610ca4565b92915050565b6000610cd982610c00565b9050919050565b610ce981610cce565b82525050565b6000602082019050610d046000830184610ce0565b92915050565b6000604051905090565b600080fd5b600080fd5b610d2781610c9a565b8114610d3257600080fd5b50565b600081359050610d4481610d1e565b92915050565b600060208284031215610d6057610d5f610d14565b5b6000610d6e84828501610d35565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b610dac81610cce565b82525050565b6000610dbe8383610da3565b60208301905092915050565b6000602082019050919050565b6000610de282610d77565b610dec8185610d82565b9350610df783610d93565b8060005b83811015610e28578151610e0f8882610db2565b9750610e1a83610dca565b925050600181019050610dfb565b5085935050505092915050565b60006020820190508181036000830152610e4f8184610dd7565b905092915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610eaa82610e61565b810181811067ffffffffffffffff82111715610ec957610ec8610e72565b5b80604052505050565b6000610edc610d0a565b9050610ee88282610ea1565b919050565b600067ffffffffffffffff821115610f0857610f07610e72565b5b610f1182610e61565b9050602081019050919050565b82818337600083830152505050565b6000610f40610f3b84610eed565b610ed2565b905082815260208101848484011115610f5c57610f5b610e5c565b5b610f67848285610f1e565b509392505050565b600082601f830112610f8457610f83610e57565b5b8135610f94848260208601610f2d565b91505092915050565b60098110610faa57600080fd5b50565b600081359050610fbc81610f9d565b92915050565b600080600080600060a08688031215610fde57610fdd610d14565b5b600086013567ffffffffffffffff811115610ffc57610ffb610d19565b5b61100888828901610f6f565b955050602061101988828901610fad565b945050604086013567ffffffffffffffff81111561103a57611039610d19565b5b61104688828901610f6f565b935050606061105788828901610d35565b925050608061106888828901610d35565b9150509295509295909350565b61107e81610cce565b811461108957600080fd5b50565b60008135905061109b81611075565b92915050565b6000602082840312156110b7576110b6610d14565b5b60006110c58482850161108c565b91505092915050565b600081905092915050565b50565b60006110e96000836110ce565b91506110f4826110d9565b600082019050919050565b600061110a826110dc565b9150819050919050565b60006040820190506111296000830185610ca4565b6111366020830184610ca4565b9392505050565b600082825260208201905092915050565b7f456d70747920636f6e74726163742064657461696c7320494400000000000000600082015250565b600061118460198361113d565b915061118f8261114e565b602082019050919050565b600060208201905081810360008301526111b381611177565b9050919050565b7f456d707479207469746c65000000000000000000000000000000000000000000600082015250565b60006111f0600b8361113d565b91506111fb826111ba565b602082019050919050565b6000602082019050818103600083015261121f816111e3565b9050919050565b7f476f616c206d7573742062652067726561746572207468616e20300000000000600082015250565b600061125c601b8361113d565b915061126782611226565b602082019050919050565b6000602082019050818103600083015261128b8161124f565b9050919050565b7f4475726174696f6e206d7573742062652067726561746572207468616e203000600082015250565b60006112c8601f8361113d565b91506112d382611292565b602082019050919050565b600060208201905081810360008301526112f7816112bb565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600081519050919050565b60005b8381101561135657808201518184015260208101905061133b565b60008484015250505050565b600061136d8261132d565b611377818561113d565b9350611387818560208601611338565b61139081610e61565b840191505092915050565b600060ff82169050919050565b6113b18161139b565b82525050565b600060e08201905081810360008301526113d1818a611362565b905081810360208301526113e58189611362565b90506113f460408301886113a8565b6114016060830187610ca4565b61140e6080830186610ca4565b61141b60a0830185610ce0565b61142860c0830184610ce0565b98975050505050505050565b600081519050919050565b600061144a82611434565b61145481856110ce565b9350611464818560208601611338565b80840191505092915050565b600061147c828461143f565b915081905092915050565b600060a08201905081810360008301526114a18188611362565b905081810360208301526114b58187611362565b90506114c460408301866113a8565b6114d16060830185610ca4565b6114de6080830184610ca4565b969550505050505056fea2646970667358221220601f28e0834720570f34f57e3f083f679bb2d5c921f10c0108e1df26a82ab09364736f6c63430008180033",
  "deployedBytecode": "0x6080604052600436106100955760003560e01c80638da5cb5b116100595780638da5cb5b14610150578063ae3063191461017b578063b4be88f3146101a4578063cb5e02f5146101cf578063f2fde38b146101ff5761009c565b80630df72159146100a157806312065fe0146100cc57806324600fc3146100f75780633a88cc851461010e578063715018a6146101395761009c565b3661009c57005b600080fd5b3480156100ad57600080fd5b506100b6610228565b6040516100c39190610c7f565b60405180910390f35b3480156100d857600080fd5b506100e161024e565b6040516100ee9190610cb3565b60405180910390f35b34801561010357600080fd5b5061010c610256565b005b34801561011a57600080fd5b506101236103a0565b6040516101309190610cb3565b60405180910390f35b34801561014557600080fd5b5061014e6103aa565b005b34801561015c57600080fd5b506101656103be565b6040516101729190610cef565b60405180910390f35b34801561018757600080fd5b506101a2600480360381019061019d9190610d4a565b6103e7565b005b3480156101b057600080fd5b506101b961047c565b6040516101c69190610e35565b60405180910390f35b6101e960048036038101906101e49190610fc2565b61050a565b6040516101f69190610cef565b60405180910390f35b34801561020b57600080fd5b50610226600480360381019061022191906110a1565b610976565b005b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600047905090565b61025e6109fc565b60004790506000810361029d576040517f67e3990d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006102a76103be565b73ffffffffffffffffffffffffffffffffffffffff16826040516102ca906110ff565b60006040518083038185875af1925050503d8060008114610307576040519150601f19603f3d011682016040523d82523d6000602084013e61030c565b606091505b5050905080610347576040517f27fcd9d100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61034f6103be565b73ffffffffffffffffffffffffffffffffffffffff167feaff4b37086828766ad3268786972c0cd24259d4c87a80f9d3963a3c3d999b0d836040516103949190610cb3565b60405180910390a25050565b6000600354905090565b6103b26109fc565b6103bc6000610a83565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6103ef6109fc565b670de0b6b3a7640000811115610431576040517f58d620b300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006003549050816003819055507fb2743902575ffdab882dfa43a3501f82fbbefa0d2c637e393aed1e80e2cb840b8183604051610470929190611114565b60405180910390a15050565b6060600180548060200260200160405190810160405280929190818152602001828054801561050057602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116104b6575b5050505050905090565b60008086511161054f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105469061119a565b60405180910390fd5b6000845111610593576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161058a90611206565b60405180910390fd5b600083116105d6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105cd90611272565b60405180910390fd5b60008211610619576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610610906112de565b60405180910390fd5b600354341015610655576040517fcd0db44200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006106807f0000000000000000000000000000000000000000000000000000000000000000610b47565b905060008786886008811115610699576106986112fe565b5b878730600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040516024016106d597969594939291906113b7565b6040516020818303038152906040527f561cf2ab000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050905060008273ffffffffffffffffffffffffffffffffffffffff168260405161077b9190611470565b6000604051808303816000865af19150503d80600081146107b8576040519150601f19603f3d011682016040523d82523d6000602084013e6107bd565b606091505b50509050806107f8576040517fcba601e300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001839080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639851967c846040518263ffffffff1660e01b81526004016108b69190610cef565b600060405180830381600087803b1580156108d057600080fd5b505af11580156108e4573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fff1332e9603156064c04f8155bf5371aaa2e993afb3ca17a7c2f2ef582a6c0738b8a8c600881111561094c5761094b6112fe565b5b8a8c60405161095f959493929190611487565b60405180910390a382935050505095945050505050565b61097e6109fc565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036109f05760006040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016109e79190610cef565b60405180910390fd5b6109f981610a83565b50565b610a04610bf8565b73ffffffffffffffffffffffffffffffffffffffff16610a226103be565b73ffffffffffffffffffffffffffffffffffffffff1614610a8157610a45610bf8565b6040517f118cdaa7000000000000000000000000000000000000000000000000000000008152600401610a789190610cef565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000763d602d80600a3d3981f3363d3d373d3d3d363d730000008260601b60e81c176000526e5af43d82803e903d91602b57fd5bf38260781b17602052603760096000f09050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610bf3576040517fc2f868f400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b919050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610c45610c40610c3b84610c00565b610c20565b610c00565b9050919050565b6000610c5782610c2a565b9050919050565b6000610c6982610c4c565b9050919050565b610c7981610c5e565b82525050565b6000602082019050610c946000830184610c70565b92915050565b6000819050919050565b610cad81610c9a565b82525050565b6000602082019050610cc86000830184610ca4565b92915050565b6000610cd982610c00565b9050919050565b610ce981610cce565b82525050565b6000602082019050610d046000830184610ce0565b92915050565b6000604051905090565b600080fd5b600080fd5b610d2781610c9a565b8114610d3257600080fd5b50565b600081359050610d4481610d1e565b92915050565b600060208284031215610d6057610d5f610d14565b5b6000610d6e84828501610d35565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b610dac81610cce565b82525050565b6000610dbe8383610da3565b60208301905092915050565b6000602082019050919050565b6000610de282610d77565b610dec8185610d82565b9350610df783610d93565b8060005b83811015610e28578151610e0f8882610db2565b9750610e1a83610dca565b925050600181019050610dfb565b5085935050505092915050565b60006020820190508181036000830152610e4f8184610dd7565b905092915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610eaa82610e61565b810181811067ffffffffffffffff82111715610ec957610ec8610e72565b5b80604052505050565b6000610edc610d0a565b9050610ee88282610ea1565b919050565b600067ffffffffffffffff821115610f0857610f07610e72565b5b610f1182610e61565b9050602081019050919050565b82818337600083830152505050565b6000610f40610f3b84610eed565b610ed2565b905082815260208101848484011115610f5c57610f5b610e5c565b5b610f67848285610f1e565b509392505050565b600082601f830112610f8457610f83610e57565b5b8135610f94848260208601610f2d565b91505092915050565b60098110610faa57600080fd5b50565b600081359050610fbc81610f9d565b92915050565b600080600080600060a08688031215610fde57610fdd610d14565b5b600086013567ffffffffffffffff811115610ffc57610ffb610d19565b5b61100888828901610f6f565b955050602061101988828901610fad565b945050604086013567ffffffffffffffff81111561103a57611039610d19565b5b61104688828901610f6f565b935050606061105788828901610d35565b925050608061106888828901610d35565b9150509295509295909350565b61107e81610cce565b811461108957600080fd5b50565b60008135905061109b81611075565b92915050565b6000602082840312156110b7576110b6610d14565b5b60006110c58482850161108c565b91505092915050565b600081905092915050565b50565b60006110e96000836110ce565b91506110f4826110d9565b600082019050919050565b600061110a826110dc565b9150819050919050565b60006040820190506111296000830185610ca4565b6111366020830184610ca4565b9392505050565b600082825260208201905092915050565b7f456d70747920636f6e74726163742064657461696c7320494400000000000000600082015250565b600061118460198361113d565b915061118f8261114e565b602082019050919050565b600060208201905081810360008301526111b381611177565b9050919050565b7f456d707479207469746c65000000000000000000000000000000000000000000600082015250565b60006111f0600b8361113d565b91506111fb826111ba565b602082019050919050565b6000602082019050818103600083015261121f816111e3565b9050919050565b7f476f616c206d7573742062652067726561746572207468616e20300000000000600082015250565b600061125c601b8361113d565b915061126782611226565b602082019050919050565b6000602082019050818103600083015261128b8161124f565b9050919050565b7f4475726174696f6e206d7573742062652067726561746572207468616e203000600082015250565b60006112c8601f8361113d565b91506112d382611292565b602082019050919050565b600060208201905081810360008301526112f7816112bb565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600081519050919050565b60005b8381101561135657808201518184015260208101905061133b565b60008484015250505050565b600061136d8261132d565b611377818561113d565b9350611387818560208601611338565b61139081610e61565b840191505092915050565b600060ff82169050919050565b6113b18161139b565b82525050565b600060e08201905081810360008301526113d1818a611362565b905081810360208301526113e58189611362565b90506113f460408301886113a8565b6114016060830187610ca4565b61140e6080830186610ca4565b61141b60a0830185610ce0565b61142860c0830184610ce0565b98975050505050505050565b600081519050919050565b600061144a82611434565b61145481856110ce565b9350611464818560208601611338565b80840191505092915050565b600061147c828461143f565b915081905092915050565b600060a08201905081810360008301526114a18188611362565b905081810360208301526114b58187611362565b90506114c460408301866113a8565b6114d16060830185610ca4565b6114de6080830184610ca4565b969550505050505056fea2646970667358221220601f28e0834720570f34f57e3f083f679bb2d5c921f10c0108e1df26a82ab09364736f6c63430008180033",
  "devdoc": {
    "details": "Factory contract for creating new crowdfunding campaigns",
    "errors": {
      "ERC1167FailedCreateClone()": [
        {
          "details": "A clone instance deployment failed."
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "CrowdFundingFactory",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8,
        "contract": "contracts/CrowdFundingFactory.sol:CrowdFundingFactory",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2806,
        "contract": "contracts/CrowdFundingFactory.sol:CrowdFundingFactory",
        "label": "deployedCrowdFundingContracts",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 2808,
        "contract": "contracts/CrowdFundingFactory.sol:CrowdFundingFactory",
        "label": "crowdFundingToken",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 2811,
        "contract": "contracts/CrowdFundingFactory.sol:CrowdFundingFactory",
        "label": "fundingFee",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 2814,
        "contract": "contracts/CrowdFundingFactory.sol:CrowdFundingFactory",
        "label": "donationToken",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(CrowdFundingToken)3208"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(CrowdFundingToken)3208": {
        "encoding": "inplace",
        "label": "contract CrowdFundingToken",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}