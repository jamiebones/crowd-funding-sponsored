{
  "address": "0x7f8A17c30bc4Fd9AEd732b3264ababee9a4e100E",
  "abi": [
    {
      "inputs": [],
      "name": "CamPaignEndedErrorNoLongerAcceptingDonations",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CampaignHasEnded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CampaignStillRunning",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "CanNotVoteOnMileStone",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_donorAddress",
          "type": "address"
        }
      ],
      "name": "CantWithdrawFundsCampaignEnded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientFunds",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidInitialization",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MaximumNumberofWithdrawalExceeded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MileStoneVotingHasElapsed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MileStoneVotingPeriodHasNotElapsed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MilestoneHasEnded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NewDurationSmallerThanPreviousDuration",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotInitializing",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TheMaximumMilestoneHaveBeenCreated",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "WithdrawalFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "YouAreNotTheOwnerOfTheCampaign",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "YouDidNotDonateToThisCampaign",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "YouHaveAPendingMileStone",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "YouHaveVotedForThisMilestoneAlready",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "project",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "data",
          "type": "uint256"
        }
      ],
      "name": "CampaignEnded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "project",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "donor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountReceived",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountDonated",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "date",
          "type": "uint256"
        }
      ],
      "name": "DonationRetrievedByDonor",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "version",
          "type": "uint64"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "project",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum CrowdFunding.MilestoneStatus",
          "name": "status",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "milestoneCID",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "date",
          "type": "uint256"
        }
      ],
      "name": "MileStoneStatusUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "datecreated",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "period",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "milestoneCID",
          "type": "string"
        }
      ],
      "name": "MilestoneCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "date",
          "type": "uint256"
        }
      ],
      "name": "MilestoneWithdrawal",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "donor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "project",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "date",
          "type": "uint256"
        }
      ],
      "name": "UserDonatedToProject",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "voter",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "project",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "vote",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "date",
          "type": "uint256"
        }
      ],
      "name": "UserVotedOnMileStone",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "voter",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "project",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "support",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "milestoneCID",
          "type": "string"
        }
      ],
      "name": "VotedOnMilestone",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "campaignEnded",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "milestoneCID",
          "type": "string"
        }
      ],
      "name": "createNewMilestone",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "donationToken",
      "outputs": [
        {
          "internalType": "contract CrowdFundingToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "donors",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFundingDetails",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "giveDonationToCause",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_donorAddress",
          "type": "address"
        }
      ],
      "name": "hasVotedOnMilestone",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newPeriod",
          "type": "uint256"
        }
      ],
      "name": "increaseCampaignPeriod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_contractDetailsId",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_title",
          "type": "string"
        },
        {
          "internalType": "enum CrowdFunding.Category",
          "name": "_category",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_duration",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_factoryAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_donationTokenAddress",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "milestones",
      "outputs": [
        {
          "internalType": "string",
          "name": "milestoneCID",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "votingPeriod",
          "type": "uint256"
        },
        {
          "internalType": "enum CrowdFunding.MilestoneStatus",
          "name": "status",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "supportVote",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "againstVote",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "retrieveDonatedAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalVotesOnMilestone",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "support",
          "type": "bool"
        }
      ],
      "name": "voteOnMilestone",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawMilestone",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x640ca32c9f94a51cc771dd2d915f3fb8e99e2c041b684382358e7bc44b51d8ec",
  "receipt": {
    "to": null,
    "from": "0x40BDC27880A522B4346844A96aDAB92DcEDB1664",
    "contractAddress": "0x7f8A17c30bc4Fd9AEd732b3264ababee9a4e100E",
    "transactionIndex": 1,
    "gasUsed": "2821895",
    "logsBloom": "0x
    "blockHash": "0x1a1e9e1c828eabbb6945c448dceeac7e8316c95f14965c999ddef332f3d9d7c2",
    "transactionHash": "0x640ca32c9f94a51cc771dd2d915f3fb8e99e2c041b684382358e7bc44b51d8ec",
    "logs": [],
    "blockNumber": 47606775,
    "cumulativeGasUsed": "2928030",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "fc4d881b10f55382ed55e41e9c4583b5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"CamPaignEndedErrorNoLongerAcceptingDonations\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CampaignHasEnded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CampaignStillRunning\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"CanNotVoteOnMileStone\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_donorAddress\",\"type\":\"address\"}],\"name\":\"CantWithdrawFundsCampaignEnded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientFunds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MaximumNumberofWithdrawalExceeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MileStoneVotingHasElapsed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MileStoneVotingPeriodHasNotElapsed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MilestoneHasEnded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NewDurationSmallerThanPreviousDuration\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TheMaximumMilestoneHaveBeenCreated\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawalFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"YouAreNotTheOwnerOfTheCampaign\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"YouDidNotDonateToThisCampaign\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"YouHaveAPendingMileStone\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"YouHaveVotedForThisMilestoneAlready\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"project\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"name\":\"CampaignEnded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"project\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"donor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountDonated\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"}],\"name\":\"DonationRetrievedByDonor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"project\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum CrowdFunding.MilestoneStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"milestoneCID\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"}],\"name\":\"MileStoneStatusUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"datecreated\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"milestoneCID\",\"type\":\"string\"}],\"name\":\"MilestoneCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"}],\"name\":\"MilestoneWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"donor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"project\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"}],\"name\":\"UserDonatedToProject\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"project\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"vote\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"}],\"name\":\"UserVotedOnMileStone\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"project\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"support\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"milestoneCID\",\"type\":\"string\"}],\"name\":\"VotedOnMilestone\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"campaignEnded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"milestoneCID\",\"type\":\"string\"}],\"name\":\"createNewMilestone\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"donationToken\",\"outputs\":[{\"internalType\":\"contract CrowdFundingToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"donors\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFundingDetails\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"giveDonationToCause\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_donorAddress\",\"type\":\"address\"}],\"name\":\"hasVotedOnMilestone\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPeriod\",\"type\":\"uint256\"}],\"name\":\"increaseCampaignPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_contractDetailsId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_title\",\"type\":\"string\"},{\"internalType\":\"enum CrowdFunding.Category\",\"name\":\"_category\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_factoryAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_donationTokenAddress\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"milestones\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"milestoneCID\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"votingPeriod\",\"type\":\"uint256\"},{\"internalType\":\"enum CrowdFunding.MilestoneStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"supportVote\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"againstVote\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"retrieveDonatedAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalVotesOnMilestone\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"support\",\"type\":\"bool\"}],\"name\":\"voteOnMilestone\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawMilestone\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"Main contract for crowdfunding campaigns\",\"errors\":{\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"events\":{\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{\"giveDonationToCause()\":{\"custom:security\":\"non-reentrant\",\"details\":\"Emits UserDonatedToProject event on successful donation\"},\"retrieveDonatedAmount()\":{\"details\":\"Implements checks-effects-interactions pattern and includes withdrawal penalties based on milestone progress\"},\"voteOnMilestone(bool)\":{\"details\":\"Votes are weighted by donation amount\",\"params\":{\"support\":\"True for supporting the milestone, false for opposing\"}}},\"title\":\"CrowdFunding\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"giveDonationToCause()\":{\"notice\":\"Allows users to donate funds to the campaign\"},\"retrieveDonatedAmount()\":{\"notice\":\"Allows donors to withdraw their donations with a withdrawal fee\"},\"voteOnMilestone(bool)\":{\"notice\":\"Allows donors to vote on pending milestones\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CrowdFunding.sol\":\"CrowdFunding\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/Clones.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n */\\nlibrary Clones {\\n    /**\\n     * @dev A clone instance deployment failed.\\n     */\\n    error ERC1167FailedCreateClone();\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create(0, 0x09, 0x37)\\n        }\\n        if (instance == address(0)) {\\n            revert ERC1167FailedCreateClone();\\n        }\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create2(0, 0x09, 0x37, salt)\\n        }\\n        if (instance == address(0)) {\\n            revert ERC1167FailedCreateClone();\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(add(ptr, 0x38), deployer)\\n            mstore(add(ptr, 0x24), 0x5af43d82803e903d91602b57fd5bf3ff)\\n            mstore(add(ptr, 0x14), implementation)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73)\\n            mstore(add(ptr, 0x58), salt)\\n            mstore(add(ptr, 0x78), keccak256(add(ptr, 0x0c), 0x37))\\n            predicted := keccak256(add(ptr, 0x43), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt\\n    ) internal view returns (address predicted) {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xd18408af8a91bedb3d56343eeb9b30eb852e6dea93a5e2d5c6db9ca4cb905155\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"./extensions/IERC20Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {IERC20Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n */\\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\\n    mapping(address account => uint256) private _balances;\\n\\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `value`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `value`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `value`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\n     * this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            _totalSupply += value;\\n        } else {\\n            uint256 fromBalance = _balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                _balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                _totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                _balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n     * Relies on the `_update` mechanism\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\n     * Relies on the `_update` mechanism.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\n     * `Approval` event during `transferFrom` operations.\\n     *\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\n     * true using the following override:\\n     * ```\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * ```\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        _allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Does not emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3e1fa9d1987f8d349dfb4d6fe93bf2ca014b52ba335cfac30bfe71e357e6f80\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/ERC20Burnable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ERC20} from \\\"../ERC20.sol\\\";\\nimport {Context} from \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    /**\\n     * @dev Destroys a `value` amount of tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 value) public virtual {\\n        _burn(_msgSender(), value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, deducting from\\n     * the caller's allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `value`.\\n     */\\n    function burnFrom(address account, uint256 value) public virtual {\\n        _spendAllowance(account, _msgSender(), value);\\n        _burn(account, value);\\n    }\\n}\\n\",\"keccak256\":\"0x2659248df25e34000ed214b3dc8da2160bc39874c992b477d9e2b1b3283dc073\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236\",\"license\":\"MIT\"},\"contracts/CrowdFunding.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"./CrowdFundingFactory.sol\\\";\\nimport \\\"./CrowdFundingToken.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\n/**\\n * @title CrowdFunding\\n * @dev Main contract for crowdfunding campaigns\\n */\\ncontract CrowdFunding is Initializable, ReentrancyGuard {\\n    // Structs\\n    struct Milestone {\\n        string milestoneCID;\\n        bool approved;\\n        uint256 votingPeriod;\\n        MilestoneStatus status;\\n        uint256 supportVote;\\n        uint256 againstVote;\\n        mapping(address => bool) hasVoted;\\n    }\\n\\n    // Errors\\n    error CamPaignEndedErrorNoLongerAcceptingDonations();\\n    error InsufficientFunds();\\n    error YouAreNotTheOwnerOfTheCampaign();\\n    error YouHaveAPendingMileStone();\\n    error TheMaximumMilestoneHaveBeenCreated();\\n    error YouDidNotDonateToThisCampaign();\\n    error CantWithdrawFundsCampaignEnded(address _donorAddress);\\n    error WithdrawalFailed(uint256 amount);\\n    error CanNotVoteOnMileStone(address _address);\\n    error YouHaveVotedForThisMilestoneAlready(address _address);\\n    error MileStoneVotingHasElapsed();\\n    error MileStoneVotingPeriodHasNotElapsed();\\n    error MilestoneHasEnded();\\n    error MaximumNumberofWithdrawalExceeded();\\n    error CampaignStillRunning();\\n    error NewDurationSmallerThanPreviousDuration();\\n    error CampaignHasEnded();\\n\\n    // Events\\n    event MilestoneCreated(\\n        address indexed owner,\\n        uint256 datecreated,\\n        uint256 period,\\n        string milestoneCID\\n    );\\n\\n    event UserDonatedToProject(\\n        address indexed donor,\\n        uint256 amount,\\n        address indexed project,\\n        uint256 date\\n    );\\n\\n    event UserVotedOnMileStone(\\n        address indexed voter,\\n        address indexed project,\\n        bool vote,\\n        uint256 date\\n    );\\n\\n    event MileStoneStatusUpdated(\\n        address indexed project,\\n        MilestoneStatus status,\\n        string milestoneCID,\\n        uint256 date\\n    );\\n\\n    event MilestoneWithdrawal(\\n        address indexed owner,\\n        uint256 amount,\\n        uint256 date\\n    );\\n\\n    event CampaignEnded(address indexed project, uint256 data);\\n    event DonationRetrievedByDonor(\\n        address indexed project,\\n        address indexed donor,\\n        uint256 amountReceived,\\n        uint256 amountDonated,\\n        uint256 date\\n    );\\n    event VotedOnMilestone(\\n        address indexed voter,\\n        address indexed project,\\n        bool support,\\n        uint256 amount,\\n        uint256 timestamp,\\n        string milestoneCID\\n    );\\n\\n    // State variables\\n    bool public campaignEnded;\\n    address payable private campaignOwner;\\n    address private factoryContractAddress;\\n    Category private category;\\n    string private title;\\n    string private contractDetailsId;\\n    uint256 private targetAmount;\\n    uint256 private campaignDuration;\\n    uint256 private amountDonated;\\n    uint256 private numberOfDonors;\\n    uint256 private milestoneCounter;\\n    uint256 private approvedMilestone;\\n    uint256 private numberOfWithdrawal;\\n    uint256 private amountRecalledByDonor;\\n    uint256 constant baseNumber = 10 ** 18;\\n    uint256 constant taxOnWithdrawingDonation = 20; //20% tax on withdrawing your donation\\n    CrowdFundingToken public donationToken;\\n\\n    mapping(address => uint256) public donors;\\n    mapping(uint256 => Milestone) public milestones;\\n\\n    enum MilestoneStatus {\\n        Default,\\n        Pending,\\n        Approved,\\n        Declined\\n    }\\n\\n    enum Category {\\n        TECHNOLOGY,\\n        ARTS,\\n        COMMUNITY,\\n        EDUCATION,\\n        ENVIRONMENT,\\n        HEALTH,\\n        SOCIAL,\\n        CHARITY,\\n        OTHER\\n    }\\n\\n    modifier onlycampaignOwner(address _address) {\\n        if (_address != campaignOwner) {\\n            revert YouAreNotTheOwnerOfTheCampaign();\\n        }\\n        _;\\n    }\\n\\n    //function to initilize the contract:\\n    function initialize(\\n        string calldata _contractDetailsId,\\n        string calldata _title,\\n        Category _category,\\n        uint256 _amount,\\n        uint256 _duration,\\n        address _factoryAddress,\\n        address _donationTokenAddress\\n    ) external initializer {\\n        contractDetailsId = _contractDetailsId;\\n        title = _title;\\n        category = _category;\\n        campaignDuration = _duration;\\n        targetAmount = _amount;\\n        factoryContractAddress = _factoryAddress;\\n        campaignOwner = payable(tx.origin);\\n        donationToken = CrowdFundingToken(_donationTokenAddress);\\n    }\\n\\n    /// @notice Allows users to donate funds to the campaign\\n    /// @dev Emits UserDonatedToProject event on successful donation\\n    /// @custom:security non-reentrant\\n    function giveDonationToCause() external payable nonReentrant {\\n        // Check campaign state\\n        if (campaignEnded) {\\n            revert CamPaignEndedErrorNoLongerAcceptingDonations();\\n        }\\n\\n        if (block.timestamp >= campaignDuration) {\\n            revert CamPaignEndedErrorNoLongerAcceptingDonations();\\n        }\\n\\n        if (numberOfWithdrawal >= 3) {\\n            revert CamPaignEndedErrorNoLongerAcceptingDonations();\\n        }\\n\\n        uint256 donationAmount = msg.value;\\n        if (donationAmount == 0) {\\n            revert InsufficientFunds();\\n        }\\n\\n        // Update donor statistics\\n        if (donors[msg.sender] == 0) {\\n            numberOfDonors++;\\n        }\\n\\n        // Check for overflow before updating amounts\\n        donors[msg.sender] += donationAmount;\\n        amountDonated += donationAmount;\\n\\n        donationToken.mint(msg.sender, donationAmount);\\n\\n        emit UserDonatedToProject(\\n            msg.sender,\\n            donationAmount,\\n            address(this),\\n            block.timestamp\\n        );\\n    }\\n\\n    function createNewMilestone(\\n        string memory milestoneCID\\n    ) external onlycampaignOwner(msg.sender) nonReentrant {\\n        require(bytes(milestoneCID).length > 0, \\\"Empty milestone CID\\\");\\n        // Check milestone constraints\\n        if (milestones[milestoneCounter].status == MilestoneStatus.Pending) {\\n            revert YouHaveAPendingMileStone();\\n        }\\n        if (numberOfWithdrawal >= 3) {\\n            revert TheMaximumMilestoneHaveBeenCreated();\\n        }\\n        // Create new milestone\\n        uint256 newMilestoneId = milestoneCounter + 1;\\n        Milestone storage newMilestone = milestones[newMilestoneId];\\n        // Set milestone properties\\n        newMilestone.status = MilestoneStatus.Pending;\\n        newMilestone.milestoneCID = milestoneCID;\\n        newMilestone.approved = false;\\n        newMilestone.votingPeriod = block.timestamp + 14 days;\\n        newMilestone.supportVote = 0;\\n        newMilestone.againstVote = 0;\\n\\n        // Update counter\\n        milestoneCounter = newMilestoneId;\\n\\n        emit MilestoneCreated(\\n            msg.sender,\\n            block.timestamp,\\n            newMilestone.votingPeriod,\\n            milestoneCID\\n        );\\n    }\\n\\n    /// @notice Allows donors to withdraw their donations with a withdrawal fee\\n    /// @dev Implements checks-effects-interactions pattern and includes withdrawal penalties based on milestone progress\\n    function retrieveDonatedAmount() external nonReentrant {\\n        // Cache state variables\\n        uint256 userDonation = donors[msg.sender];\\n        uint256 currentApprovedMilestones = approvedMilestone;\\n        uint256 contractBal = address(this).balance;\\n\\n        // Input validation\\n        if (userDonation == 0) {\\n            revert YouDidNotDonateToThisCampaign();\\n        }\\n        if (currentApprovedMilestones >= 3) {\\n            revert CantWithdrawFundsCampaignEnded(msg.sender);\\n        }\\n\\n        // Calculate withdrawal amount based on milestone progress\\n        uint256 donationDivider;\\n        if (currentApprovedMilestones == 0) {\\n            donationDivider = baseNumber; // 100% return\\n        } else if (currentApprovedMilestones == 1) {\\n            donationDivider = (2 * baseNumber) / 3; // 66.67% return\\n        } else if (currentApprovedMilestones == 2) {\\n            donationDivider = baseNumber / 3; // 33.33% return\\n        } else {\\n            revert(\\\"Invalid milestone state\\\");\\n        }\\n\\n        // Calculate amounts with tax\\n        uint256 withdrawalBase = (userDonation * donationDivider) / baseNumber;\\n        uint256 taxAmount = (withdrawalBase * taxOnWithdrawingDonation) / 100;\\n        uint256 userAmount = withdrawalBase - taxAmount;\\n\\n        // Verify contract has sufficient balance for both transfers\\n        require(\\n            contractBal >= (userAmount + taxAmount),\\n            \\\"Insufficient contract balance\\\"\\n        );\\n        require(\\n            factoryContractAddress != address(0),\\n            \\\"Invalid factory address\\\"\\n        );\\n\\n        // Update state (before external calls)\\n        donors[msg.sender] = 0;\\n        numberOfDonors--;\\n        amountRecalledByDonor += withdrawalBase;\\n\\n        console.log(\\\"Tax amount\\\", taxAmount);\\n\\n        // Burn tokens before transfer\\n        donationToken.burnTokens(userDonation, msg.sender);\\n\\n        // Transfer user amount first\\n        (bool successUser, ) = payable(msg.sender).call{value: userAmount}(\\\"\\\");\\n        if (!successUser) {\\n            revert WithdrawalFailed(userAmount);\\n        }\\n\\n        // Only attempt tax transfer if there's a tax amount\\n        if (taxAmount > 0) {\\n            (bool successTax, ) = payable(factoryContractAddress).call{\\n                value: taxAmount\\n            }(\\\"\\\");\\n            if (!successTax) {\\n                revert WithdrawalFailed(taxAmount);\\n            }\\n        }\\n\\n        emit DonationRetrievedByDonor(\\n            address(this),\\n            msg.sender,\\n            userAmount,\\n            userDonation,\\n            block.timestamp\\n        );\\n    }\\n\\n    /// @notice Allows donors to vote on pending milestones\\n    /// @dev Votes are weighted by donation amount\\n    /// @param support True for supporting the milestone, false for opposing\\n    function voteOnMilestone(bool support) external nonReentrant {\\n        // Validate campaign state\\n        if (campaignEnded) {\\n            revert CampaignHasEnded();\\n        }\\n\\n        // Validate milestone exists\\n        if (milestoneCounter == 0) {\\n            revert(\\\"No milestone exists\\\");\\n        }\\n\\n        Milestone storage currentMilestone = milestones[milestoneCounter];\\n\\n        // Validate milestone state\\n        if (currentMilestone.status != MilestoneStatus.Pending) {\\n            revert CanNotVoteOnMileStone(msg.sender);\\n        }\\n\\n        // Check voting period\\n        if (block.timestamp > currentMilestone.votingPeriod) {\\n            revert MileStoneVotingHasElapsed();\\n        }\\n\\n        // Cache donor amount for gas optimization and multiple uses\\n        uint256 weight = donors[msg.sender];\\n        if (weight == 0) {\\n            revert YouDidNotDonateToThisCampaign();\\n        }\\n\\n        // Check for duplicate votes\\n        if (currentMilestone.hasVoted[msg.sender]) {\\n            revert YouHaveVotedForThisMilestoneAlready(msg.sender);\\n        }\\n\\n        // Record vote\\n        currentMilestone.hasVoted[msg.sender] = true;\\n\\n        // Update vote tallies based on donation amount\\n        if (support) {\\n            currentMilestone.supportVote += weight;\\n        } else {\\n            currentMilestone.againstVote += weight;\\n        }\\n\\n        emit VotedOnMilestone(\\n            msg.sender,\\n            address(this),\\n            support,\\n            weight,\\n            block.timestamp,\\n            currentMilestone.milestoneCID\\n        );\\n    }\\n\\n    function withdrawMilestone()\\n        external\\n        nonReentrant\\n        onlycampaignOwner(msg.sender)\\n    {\\n        // Cache state variables to save gas\\n        uint256 currentWithdrawals = numberOfWithdrawal;\\n        uint256 currentBalance = address(this).balance;\\n        uint256 currentMilestoneCount = milestoneCounter;\\n        Milestone storage milestone = milestones[currentMilestoneCount];\\n\\n        // Early validation checks\\n        if (currentWithdrawals >= 3) {\\n            revert MaximumNumberofWithdrawalExceeded();\\n        }\\n        if (block.timestamp < campaignDuration) {\\n            revert CampaignStillRunning();\\n        }\\n\\n        // Handle first milestone withdrawal (special case)\\n        if (currentWithdrawals == 0 && currentMilestoneCount == 1) {\\n            milestone.approved = true;\\n            milestone.status = MilestoneStatus.Approved;\\n\\n            unchecked {\\n                // These additions cannot overflow\\n                approvedMilestone++;\\n                numberOfWithdrawal = 1;\\n            }\\n\\n            // Calculate first withdrawal amount (1/3 of balance)\\n            uint256 amountToWithdraw = currentBalance / 3;\\n            processWithdrawal(amountToWithdraw, false);\\n            return;\\n        }\\n\\n        // Handle subsequent milestone withdrawals\\n\\n        // Validate milestone voting period and status\\n        if (block.timestamp < milestone.votingPeriod) {\\n            revert MileStoneVotingPeriodHasNotElapsed();\\n        }\\n        if (milestone.status != MilestoneStatus.Pending) {\\n            revert MilestoneHasEnded();\\n        }\\n\\n        // Calculate total votes and determine outcome\\n        uint256 supportVotes = milestone.supportVote;\\n        uint256 againstVotes = milestone.againstVote;\\n        uint256 totalVotes = supportVotes + againstVotes;\\n\\n        // Handle no-vote case or successful vote case\\n        bool isApproved;\\n        if (totalVotes == 0) {\\n            isApproved = true;\\n        } else {\\n            // Check if support votes >= 2/3 of total votes\\n            isApproved = (supportVotes * 100) >= ((totalVotes * 2) / 3) * 100;\\n        }\\n\\n        if (!isApproved) {\\n            milestone.status = MilestoneStatus.Declined;\\n            milestone.approved = false;\\n            emit MileStoneStatusUpdated(\\n                address(this),\\n                milestone.status,\\n                milestone.milestoneCID,\\n                block.timestamp\\n            );\\n            return;\\n        }\\n\\n        // Update milestone state\\n        milestone.status = MilestoneStatus.Approved;\\n        milestone.approved = true;\\n        unchecked {\\n            approvedMilestone++;\\n            numberOfWithdrawal++;\\n        }\\n\\n        emit MileStoneStatusUpdated(\\n            address(this),\\n            milestone.status,\\n            milestone.milestoneCID,\\n            block.timestamp\\n        );\\n\\n        // Calculate withdrawal amounts\\n        uint256 withdrawalAmount;\\n        uint256 taxAmount;\\n\\n        if (currentWithdrawals == 1) {\\n            // Second withdrawal: 2/3 of remaining balance\\n            withdrawalAmount =\\n                (currentBalance * 2 * baseNumber) /\\n                3 /\\n                baseNumber;\\n        } else {\\n            // Final withdrawal: Remaining balance minus 1% tax\\n            taxAmount = currentBalance / 100; // 1% tax\\n            withdrawalAmount = currentBalance - taxAmount;\\n\\n            if (taxAmount > 0) {\\n                processWithdrawal(taxAmount, true);\\n            }\\n\\n            emit CampaignEnded(address(this), block.timestamp);\\n        }\\n\\n        if (withdrawalAmount > 0) {\\n            processWithdrawal(withdrawalAmount, false);\\n        }\\n    }\\n\\n    function checkMilestoneStatus(Milestone storage milestone) internal {\\n        if (block.timestamp < milestone.votingPeriod) {\\n            revert MileStoneVotingPeriodHasNotElapsed();\\n        }\\n        if (milestone.status != MilestoneStatus.Pending) {\\n            revert MilestoneHasEnded();\\n        }\\n        if (milestone.againstVote >= milestone.supportVote) {\\n            rejectMilestone(milestone);\\n        }\\n    }\\n\\n    function approveMilestone(Milestone storage milestone) internal {\\n        milestone.status = MilestoneStatus.Approved;\\n        milestone.approved = true;\\n        approvedMilestone++;\\n        emit MileStoneStatusUpdated(\\n            address(this),\\n            milestone.status,\\n            milestone.milestoneCID,\\n            block.timestamp\\n        );\\n    }\\n\\n    function rejectMilestone(Milestone storage milestone) internal {\\n        milestone.status = MilestoneStatus.Declined;\\n        milestone.approved = false;\\n        emit MileStoneStatusUpdated(\\n            address(this),\\n            milestone.status,\\n            milestone.milestoneCID,\\n            block.timestamp\\n        );\\n    }\\n\\n    function processWithdrawal(uint256 amount, bool isTaxPayment) internal {\\n        address recipient = isTaxPayment ? factoryContractAddress : msg.sender;\\n        (bool success, ) = payable(recipient).call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert WithdrawalFailed(amount);\\n        }\\n        if (recipient == msg.sender) {\\n            emit MilestoneWithdrawal(msg.sender, amount, block.timestamp);\\n        }\\n    }\\n\\n    function contractBalance() public view returns (uint256) {\\n        return address(this).balance;\\n    }\\n\\n    function getFundingDetails()\\n        public\\n        view\\n        returns (address, uint256, uint256)\\n    {\\n        return (campaignOwner, campaignDuration, targetAmount);\\n    }\\n\\n    function hasVotedOnMilestone(\\n        address _donorAddress\\n    ) public view returns (bool) {\\n        Milestone storage milestone = milestones[milestoneCounter];\\n        if (milestone.hasVoted[_donorAddress]) {\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    function totalVotesOnMilestone() public view returns (uint256, uint256) {\\n        Milestone storage milestone = milestones[milestoneCounter];\\n        return (milestone.supportVote, milestone.againstVote);\\n    }\\n\\n    function increaseCampaignPeriod(\\n        uint256 newPeriod\\n    ) public onlycampaignOwner(msg.sender) {\\n        if (newPeriod <= campaignDuration) {\\n            revert NewDurationSmallerThanPreviousDuration();\\n        }\\n        campaignDuration = newPeriod;\\n    }\\n\\n    receive() external payable {}\\n}\\n\\n//1::1 =>\\n\",\"keccak256\":\"0xa3143b2762ebc1b4e1accb56ab3b0ec6da0fbbf8479b58c964a2f06dbd0a374a\",\"license\":\"MIT\"},\"contracts/CrowdFundingFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./CrowdFundingToken.sol\\\";\\n/**\\n * @title CrowdFundingFactory\\n * @dev Factory contract for creating new crowdfunding campaigns\\n */\\ncontract CrowdFundingFactory is Ownable {\\n    event NewCrowdFundingContractCreated(\\n        address indexed owner,\\n        address indexed contractAddress, \\n        string contractDetailsId,\\n        string title,\\n        uint8 category,\\n        uint256 duration,\\n        uint256 goal\\n    );\\n    event FundingFeeUpdated(uint256 oldFee, uint256 newFee);\\n    event FundsWithdrawn(address indexed owner, uint256 amount);\\n\\n    // Errors\\n    error FundingForNewContractTooSmall();\\n    error CreateFundingContractFailed();\\n    error WithdrawalFailed();\\n    error InvalidFee();   \\n    error NoFundsToWithdraw();\\n\\n    // State variables\\n    address private immutable CROWDFUNDING_IMPLEMENTATION;\\n    address[] private deployedCrowdFundingContracts;\\n    address private crowdFundingToken;\\n    uint256 private fundingFee = 0.000000001 ether;\\n    CrowdFundingToken public donationToken;\\n\\n     enum Category {\\n        TECHNOLOGY,\\n        ARTS,\\n        COMMUNITY,\\n        EDUCATION,\\n        ENVIRONMENT,\\n        HEALTH,\\n        SOCIAL,\\n        CHARITY,\\n        OTHER\\n    }\\n\\n\\n    constructor(address _implementation, address _donationTokenAddress) Ownable(msg.sender) {\\n        require(_implementation != address(0), \\\"Invalid implementation address\\\");\\n        CROWDFUNDING_IMPLEMENTATION = _implementation;\\n        donationToken = CrowdFundingToken(_donationTokenAddress);\\n    }\\n\\n    function createNewCrowdFundingContract(\\n        string memory _contractDetailsId,\\n        Category _category,\\n        string memory _title,\\n        uint256 _goal,\\n        uint256 _duration\\n    ) external payable returns (address) {\\n        // Add input validation\\n        require(bytes(_contractDetailsId).length > 0, \\\"Empty contract details ID\\\");\\n        require(bytes(_title).length > 0, \\\"Empty title\\\");\\n        require(_goal > 0, \\\"Goal must be greater than 0\\\");\\n        require(_duration > 0, \\\"Duration must be greater than 0\\\");\\n\\n        if (msg.value < fundingFee) {\\n            revert FundingForNewContractTooSmall();\\n        }\\n\\n        address clone = Clones.clone(CROWDFUNDING_IMPLEMENTATION);\\n        \\n        // Move initialization parameters to a separate variable for better readability\\n        bytes memory initData = abi.encodeWithSignature(\\n            \\\"initialize(string,string,uint8,uint256,uint256,address,address)\\\",\\n            _contractDetailsId,\\n            _title,\\n            uint8(_category),\\n            _goal,\\n            _duration,\\n            address(this),\\n            address(donationToken)\\n        );\\n\\n        (bool success, ) = clone.call(initData);\\n        if (!success) {\\n            revert CreateFundingContractFailed();\\n        }\\n\\n        deployedCrowdFundingContracts.push(clone);\\n\\n        donationToken.addCrowdfundingContract(clone);\\n        \\n        emit NewCrowdFundingContractCreated(\\n            msg.sender,\\n            clone,\\n            _contractDetailsId,\\n            _title,\\n            uint8(_category),\\n            _duration,\\n            _goal\\n        );\\n        \\n        return clone;\\n    }\\n\\n    function setFundingFee(uint256 _newFee) external onlyOwner {\\n        // Add validation for new fee\\n        if (_newFee > 1 ether) revert InvalidFee();\\n        uint256 oldFee = fundingFee;\\n        fundingFee = _newFee;\\n        emit FundingFeeUpdated(oldFee, _newFee);\\n    }\\n\\n    function withdrawFunds() external onlyOwner {\\n        uint256 balance = address(this).balance;\\n        if (balance == 0) revert NoFundsToWithdraw();\\n\\n        (bool success, ) = owner().call{value: balance}(\\\"\\\");\\n        if (!success) {\\n            revert WithdrawalFailed();\\n        }\\n        \\n        emit FundsWithdrawn(owner(), balance);\\n    }\\n\\n    // View functions\\n    function getDeployedCrowdFundingContracts() external view returns (address[] memory) {\\n        return deployedCrowdFundingContracts;\\n    }\\n\\n    function getFundingFee() external view returns (uint256) {\\n        return fundingFee;\\n    }\\n\\n    function getBalance() external view returns (uint256) {\\n        return address(this).balance;\\n    }\\n\\n    receive() external payable {}\\n} \",\"keccak256\":\"0xd43e1862645f7b6d5ac44d310225a797723188f1db400bd379185f4db9f50d24\",\"license\":\"MIT\"},\"contracts/CrowdFundingToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract CrowdFundingToken is ERC20, ERC20Burnable, Ownable {\\n    mapping(address => bool) public crowdfundingContracts;\\n\\n    constructor() ERC20(\\\"Donation Token\\\", \\\"DNTN\\\") Ownable(msg.sender) {}\\n\\n    // Initially owned by deployer\\n\\n    function setFactoryAndTransferOwnership(\\n        address _factoryAddress\\n    ) external onlyOwner {\\n        require(_factoryAddress != address(0), \\\"Invalid factory address\\\");\\n        crowdfundingContracts[_factoryAddress] = true;\\n        _transferOwnership(_factoryAddress);\\n    }\\n\\n    function addCrowdfundingContract(address _contract) external onlyOwner {\\n        crowdfundingContracts[_contract] = true;\\n    }\\n\\n    function mint(address to, uint256 amount) external {\\n        require(\\n            crowdfundingContracts[msg.sender],\\n            \\\"Only crowdfunding contracts can mint\\\"\\n        );\\n        _mint(to, amount);\\n    }\\n\\n    function burnTokens(uint256 amount, address from) external {\\n        require(\\n            crowdfundingContracts[msg.sender],\\n            \\\"Only crowdfunding contracts can burn\\\"\\n        );\\n        _burn(from, amount);\\n    }\\n}\\n\",\"keccak256\":\"0xf723ab5a93544415565752ee735b0e2c8ca2889421e71eff2b979f2cada84b0c\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\nlibrary console {\\n    address constant CONSOLE_ADDRESS =\\n        0x000000000000000000636F6e736F6c652e6c6f67;\\n\\n    function _sendLogPayloadImplementation(bytes memory payload) internal view {\\n        address consoleAddress = CONSOLE_ADDRESS;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            pop(\\n                staticcall(\\n                    gas(),\\n                    consoleAddress,\\n                    add(payload, 32),\\n                    mload(payload),\\n                    0,\\n                    0\\n                )\\n            )\\n        }\\n    }\\n\\n    function _castToPure(\\n      function(bytes memory) internal view fnIn\\n    ) internal pure returns (function(bytes memory) pure fnOut) {\\n        assembly {\\n            fnOut := fnIn\\n        }\\n    }\\n\\n    function _sendLogPayload(bytes memory payload) internal pure {\\n        _castToPure(_sendLogPayloadImplementation)(payload);\\n    }\\n\\n    function log() internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n    }\\n\\n    function logInt(int256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n    }\\n\\n    function logUint(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function logString(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function logBool(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function logAddress(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function logBytes(bytes memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n    }\\n\\n    function logBytes1(bytes1 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n    }\\n\\n    function logBytes2(bytes2 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n    }\\n\\n    function logBytes3(bytes3 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n    }\\n\\n    function logBytes4(bytes4 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n    }\\n\\n    function logBytes5(bytes5 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n    }\\n\\n    function logBytes6(bytes6 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n    }\\n\\n    function logBytes7(bytes7 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n    }\\n\\n    function logBytes8(bytes8 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n    }\\n\\n    function logBytes9(bytes9 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n    }\\n\\n    function logBytes10(bytes10 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n    }\\n\\n    function logBytes11(bytes11 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n    }\\n\\n    function logBytes12(bytes12 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n    }\\n\\n    function logBytes13(bytes13 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n    }\\n\\n    function logBytes14(bytes14 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n    }\\n\\n    function logBytes15(bytes15 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n    }\\n\\n    function logBytes16(bytes16 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n    }\\n\\n    function logBytes17(bytes17 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n    }\\n\\n    function logBytes18(bytes18 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n    }\\n\\n    function logBytes19(bytes19 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n    }\\n\\n    function logBytes20(bytes20 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n    }\\n\\n    function logBytes21(bytes21 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n    }\\n\\n    function logBytes22(bytes22 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n    }\\n\\n    function logBytes23(bytes23 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n    }\\n\\n    function logBytes24(bytes24 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n    }\\n\\n    function logBytes25(bytes25 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n    }\\n\\n    function logBytes26(bytes26 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n    }\\n\\n    function logBytes27(bytes27 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n    }\\n\\n    function logBytes28(bytes28 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n    }\\n\\n    function logBytes29(bytes29 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n    }\\n\\n    function logBytes30(bytes30 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n    }\\n\\n    function logBytes31(bytes31 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n    }\\n\\n    function logBytes32(bytes32 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n    }\\n\\n    function log(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function log(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function log(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function log(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function log(uint256 p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n}\\n\",\"keccak256\":\"0xf2560b5386574153057104d19a9e68a32ee912cf23c0c8df1fe9a0607f42d543\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060016000819055506131f0806100286000396000f3fe6080604052600436106100ec5760003560e01c80636eefa2dd1161008a578063bf2928a611610059578063bf2928a6146102ab578063ca0cdea8146102c2578063e0ae1b73146102ff578063e89e4ed614610328576100f3565b80636eefa2dd14610221578063858b85b31461022b5780638b7afe2e14610257578063ba53619314610282576100f3565b8063294b23a2116100c6578063294b23a2146101895780633bc47fbe146101a057806341cf938a146101cb578063561cf2ab146101f8576100f3565b80630b228b30146100f85780630df7215914610121578063205db2371461014c576100f3565b366100f357005b600080fd5b34801561010457600080fd5b5061011f600480360381019061011a9190612098565b61036a565b005b34801561012d57600080fd5b50610136610436565b6040516101439190612144565b60405180910390f35b34801561015857600080fd5b50610173600480360381019061016e919061219d565b61045c565b60405161018091906121e5565b60405180910390f35b34801561019557600080fd5b5061019e6104df565b005b3480156101ac57600080fd5b506101b5610ad7565b6040516101c291906121e5565b60405180910390f35b3480156101d757600080fd5b506101e0610aea565b6040516101ef9392919061221e565b60405180910390f35b34801561020457600080fd5b5061021f600480360381019061021a91906122df565b610b21565b005b610229610dcd565b005b34801561023757600080fd5b506102406110a2565b60405161024e9291906123c1565b60405180910390f35b34801561026357600080fd5b5061026c6110d1565b60405161027991906123ea565b60405180910390f35b34801561028e57600080fd5b506102a960048036038101906102a49190612431565b6110d9565b005b3480156102b757600080fd5b506102c0611464565b005b3480156102ce57600080fd5b506102e960048036038101906102e4919061219d565b6119dc565b6040516102f691906123ea565b60405180910390f35b34801561030b57600080fd5b506103266004803603810190610321919061259f565b6119f4565b005b34801561033457600080fd5b5061034f600480360381019061034a9190612098565b611ca1565b604051610361969594939291906126de565b60405180910390f35b3360018054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146103f0576040517f3926793000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600654821161042b576040517f152a828800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b816006819055505050565b600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600f6000600954815260200190815260200160002090508060060160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16156104d45760019150506104da565b60009150505b919050565b6104e7611d7f565b6000600e60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600a549050600047905060008303610571576040517f93e9fd3000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600382106105b657336040517f3783cd4d0000000000000000000000000000000000000000000000000000000081526004016105ad9190612746565b60405180910390fd5b60008083036105cf57670de0b6b3a76400009050610660565b600183036105ff576003670de0b6b3a764000060026105ee9190612790565b6105f89190612801565b905061065f565b60028303610623576003670de0b6b3a764000061061c9190612801565b905061065e565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106559061287e565b60405180910390fd5b5b5b6000670de0b6b3a764000082866106779190612790565b6106819190612801565b9050600060646014836106949190612790565b61069e9190612801565b9050600081836106ae919061289e565b905081816106bc91906128d2565b8510156106fe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106f590612952565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff160361078f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610786906129be565b60405180910390fd5b6000600e60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600860008154809291906107e7906129de565b919050555082600c60008282546107fe91906128d2565b925050819055506108446040518060400160405280600a81526020017f54617820616d6f756e740000000000000000000000000000000000000000000081525083611dc5565b600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639730b30588336040518363ffffffff1660e01b81526004016108a1929190612a07565b600060405180830381600087803b1580156108bb57600080fd5b505af11580156108cf573d6000803e3d6000fd5b5050505060003373ffffffffffffffffffffffffffffffffffffffff16826040516108f990612a61565b60006040518083038185875af1925050503d8060008114610936576040519150601f19603f3d011682016040523d82523d6000602084013e61093b565b606091505b505090508061098157816040517f3d1da17800000000000000000000000000000000000000000000000000000000815260040161097891906123ea565b60405180910390fd5b6000831115610a5c576000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16846040516109d290612a61565b60006040518083038185875af1925050503d8060008114610a0f576040519150601f19603f3d011682016040523d82523d6000602084013e610a14565b606091505b5050905080610a5a57836040517f3d1da178000000000000000000000000000000000000000000000000000000008152600401610a5191906123ea565b60405180910390fd5b505b3373ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff167fc365391df9733b3e962663112aeb7afcaf43165ec1762b3aa5d3d74a459c259d848b42604051610abd93929190612a76565b60405180910390a35050505050505050610ad5611e61565b565b600160009054906101000a900460ff1681565b600080600060018054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600654600554925092509250909192565b6000610b2b611e6b565b905060008160000160089054906101000a900460ff1615905060008260000160009054906101000a900467ffffffffffffffff1690506000808267ffffffffffffffff16148015610b795750825b9050600060018367ffffffffffffffff16148015610bae575060003073ffffffffffffffffffffffffffffffffffffffff163b145b905081158015610bbc575080155b15610bf3576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60018560000160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055508315610c435760018560000160086101000a81548160ff0219169083151502179055505b8d8d60049182610c54929190612cba565b508b8b60039182610c66929190612cba565b5089600260146101000a81548160ff02191690836008811115610c8c57610c8b612667565b5b0217905550876006819055508860058190555086600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550326001806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555085600d60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508315610dbd5760008560000160086101000a81548160ff0219169083151502179055507fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d26001604051610db49190612dd9565b60405180910390a15b5050505050505050505050505050565b610dd5611d7f565b600160009054906101000a900460ff1615610e1c576040517f01342aee00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6006544210610e57576040517f01342aee00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6003600b5410610e93576040517f01342aee00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600034905060008103610ed2576040517f356680b700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600e60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205403610f325760086000815480929190610f2c90612df4565b91905055505b80600e60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610f8191906128d2565b925050819055508060076000828254610f9a91906128d2565b92505081905550600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1933836040518363ffffffff1660e01b8152600401610ffe929190612e3c565b600060405180830381600087803b15801561101857600080fd5b505af115801561102c573d6000803e3d6000fd5b505050503073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fd1c1ab18b883285500514418a94e5e9f65b62e92bfd2f9bae6845c186839d7b4834260405161108f9291906123c1565b60405180910390a3506110a0611e61565b565b6000806000600f6000600954815260200190815260200160002090508060040154816005015492509250509091565b600047905090565b6110e1611d7f565b600160009054906101000a900460ff1615611128576040517f85b1d52800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006009540361116d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161116490612eb1565b60405180910390fd5b6000600f6000600954815260200190815260200160002090506001600381111561119a57611199612667565b5b8160030160009054906101000a900460ff1660038111156111be576111bd612667565b5b1461120057336040517f687ac16f0000000000000000000000000000000000000000000000000000000081526004016111f79190612746565b60405180910390fd5b806002015442111561123e576040517fceb9473500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600e60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600081036112bc576040517f93e9fd3000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8160060160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161561134d57336040517fe984dbfb0000000000000000000000000000000000000000000000000000000081526004016113449190612746565b60405180910390fd5b60018260060160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555082156113cd57808260040160008282546113c191906128d2565b925050819055506113e9565b808260050160008282546113e191906128d2565b925050819055505b3073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f835ab76283d31bbb9aef85ac068b9fb59cfef2cf1ae599c0e2388bc23fec43828584428760000160405161144f9493929190612f55565b60405180910390a35050611461611e61565b50565b61146c611d7f565b3360018054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146114f2576040517f3926793000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600b5490506000479050600060095490506000600f6000838152602001908152602001600020905060038410611556576040517f0df8303500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600654421015611592576040517ff6154cc600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000841480156115a25750600182145b156116315760018160010160006101000a81548160ff02191690831515021790555060028160030160006101000a81548160ff021916908360038111156115ec576115eb612667565b5b0217905550600a600081548092919060010191905055506001600b81905550600060038461161a9190612801565b9050611627816000611e93565b50505050506119d1565b806002015442101561166f576040517f9fc29f9d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600381111561168357611682612667565b5b8160030160009054906101000a900460ff1660038111156116a7576116a6612667565b5b146116de576040517f8394b0f900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600081600401549050600082600501549050600081836116fe91906128d2565b905060008082036117125760019050611749565b606460036002846117239190612790565b61172d9190612801565b6117379190612790565b6064856117449190612790565b101590505b8061180b5760038560030160006101000a81548160ff0219169083600381111561177657611775612667565b5b021790555060008560010160006101000a81548160ff0219169083151502179055503073ffffffffffffffffffffffffffffffffffffffff167f347bdd1056464d68f105c00d8b42002855fff0045b252566b313350f53f802798660030160009054906101000a900460ff1687600001426040516117f693929190612fa1565b60405180910390a250505050505050506119d1565b60028560030160006101000a81548160ff0219169083600381111561183357611832612667565b5b021790555060018560010160006101000a81548160ff021916908315150217905550600a60008154809291906001019190505550600b600081548092919060010191905055503073ffffffffffffffffffffffffffffffffffffffff167f347bdd1056464d68f105c00d8b42002855fff0045b252566b313350f53f802798660030160009054906101000a900460ff1687600001426040516118d793929190612fa1565b60405180910390a260008060018a0361193057670de0b6b3a76400006003670de0b6b3a764000060028c61190b9190612790565b6119159190612790565b61191f9190612801565b6119299190612801565b91506119b1565b60648961193d9190612801565b9050808961194b919061289e565b9150600081111561196257611961816001611e93565b5b3073ffffffffffffffffffffffffffffffffffffffff167fe8c6942b5fd4851c5d5f3928293eae5a0a0228eb48886d99b62886dfe573e7cb426040516119a891906123ea565b60405180910390a25b60008211156119c6576119c5826000611e93565b5b505050505050505050505b506119da611e61565b565b600e6020528060005260406000206000915090505481565b3360018054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614611a7a576040517f3926793000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611a82611d7f565b6000825111611ac6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611abd9061302b565b60405180910390fd5b60016003811115611ada57611ad9612667565b5b600f6000600954815260200190815260200160002060030160009054906101000a900460ff166003811115611b1257611b11612667565b5b03611b49576040517fcd2fad3a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6003600b5410611b85576040517fe040d7f600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006001600954611b9691906128d2565b90506000600f6000838152602001908152602001600020905060018160030160006101000a81548160ff02191690836003811115611bd757611bd6612667565b5b021790555083816000019081611bed919061304b565b5060008160010160006101000a81548160ff0219169083151502179055506212750042611c1a91906128d2565b81600201819055506000816004018190555060008160050181905550816009819055503373ffffffffffffffffffffffffffffffffffffffff167f224ac17b3eb418fb512ed55f6ddb93018074c71f4ad405edb692c5c343b3680142836002015487604051611c8b9392919061311d565b60405180910390a25050611c9d611e61565b5050565b600f602052806000526040600020600091509050806000018054611cc490612ae7565b80601f0160208091040260200160405190810160405280929190818152602001828054611cf090612ae7565b8015611d3d5780601f10611d1257610100808354040283529160200191611d3d565b820191906000526020600020905b815481529060010190602001808311611d2057829003601f168201915b5050505050908060010160009054906101000a900460ff16908060020154908060030160009054906101000a900460ff16908060040154908060050154905086565b600260005403611dbb576040517f3ee5aeb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002600081905550565b611e5d8282604051602401611ddb92919061315b565b6040516020818303038152906040527fb60e72cc000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611ffe565b5050565b6001600081905550565b60007ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00905090565b600081611ea05733611ec4565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff165b905060008173ffffffffffffffffffffffffffffffffffffffff1684604051611eec90612a61565b60006040518083038185875af1925050503d8060008114611f29576040519150601f19603f3d011682016040523d82523d6000602084013e611f2e565b606091505b5050905080611f7457836040517f3d1da178000000000000000000000000000000000000000000000000000000008152600401611f6b91906123ea565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611ff8573373ffffffffffffffffffffffffffffffffffffffff167f39315d2beee6219c433f330272de1e8249029171e201a0b7d188c5942d5ca1fe8542604051611fef9291906123c1565b60405180910390a25b50505050565b6120158161200d612018612039565b63ffffffff16565b50565b60006a636f6e736f6c652e6c6f679050600080835160208501845afa505050565b612044819050919050565b61204c61318b565b565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b61207581612062565b811461208057600080fd5b50565b6000813590506120928161206c565b92915050565b6000602082840312156120ae576120ad612058565b5b60006120bc84828501612083565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061210a612105612100846120c5565b6120e5565b6120c5565b9050919050565b600061211c826120ef565b9050919050565b600061212e82612111565b9050919050565b61213e81612123565b82525050565b60006020820190506121596000830184612135565b92915050565b600061216a826120c5565b9050919050565b61217a8161215f565b811461218557600080fd5b50565b60008135905061219781612171565b92915050565b6000602082840312156121b3576121b2612058565b5b60006121c184828501612188565b91505092915050565b60008115159050919050565b6121df816121ca565b82525050565b60006020820190506121fa60008301846121d6565b92915050565b6122098161215f565b82525050565b61221881612062565b82525050565b60006060820190506122336000830186612200565b612240602083018561220f565b61224d604083018461220f565b949350505050565b600080fd5b600080fd5b600080fd5b60008083601f84011261227a57612279612255565b5b8235905067ffffffffffffffff8111156122975761229661225a565b5b6020830191508360018202830111156122b3576122b261225f565b5b9250929050565b600981106122c757600080fd5b50565b6000813590506122d9816122ba565b92915050565b600080600080600080600080600060e08a8c03121561230157612300612058565b5b60008a013567ffffffffffffffff81111561231f5761231e61205d565b5b61232b8c828d01612264565b995099505060208a013567ffffffffffffffff81111561234e5761234d61205d565b5b61235a8c828d01612264565b9750975050604061236d8c828d016122ca565b955050606061237e8c828d01612083565b945050608061238f8c828d01612083565b93505060a06123a08c828d01612188565b92505060c06123b18c828d01612188565b9150509295985092959850929598565b60006040820190506123d6600083018561220f565b6123e3602083018461220f565b9392505050565b60006020820190506123ff600083018461220f565b92915050565b61240e816121ca565b811461241957600080fd5b50565b60008135905061242b81612405565b92915050565b60006020828403121561244757612446612058565b5b60006124558482850161241c565b91505092915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6124ac82612463565b810181811067ffffffffffffffff821117156124cb576124ca612474565b5b80604052505050565b60006124de61204e565b90506124ea82826124a3565b919050565b600067ffffffffffffffff82111561250a57612509612474565b5b61251382612463565b9050602081019050919050565b82818337600083830152505050565b600061254261253d846124ef565b6124d4565b90508281526020810184848401111561255e5761255d61245e565b5b612569848285612520565b509392505050565b600082601f83011261258657612585612255565b5b813561259684826020860161252f565b91505092915050565b6000602082840312156125b5576125b4612058565b5b600082013567ffffffffffffffff8111156125d3576125d261205d565b5b6125df84828501612571565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015612622578082015181840152602081019050612607565b60008484015250505050565b6000612639826125e8565b61264381856125f3565b9350612653818560208601612604565b61265c81612463565b840191505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600481106126a7576126a6612667565b5b50565b60008190506126b882612696565b919050565b60006126c8826126aa565b9050919050565b6126d8816126bd565b82525050565b600060c08201905081810360008301526126f8818961262e565b905061270760208301886121d6565b612714604083018761220f565b61272160608301866126cf565b61272e608083018561220f565b61273b60a083018461220f565b979650505050505050565b600060208201905061275b6000830184612200565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061279b82612062565b91506127a683612062565b92508282026127b481612062565b915082820484148315176127cb576127ca612761565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061280c82612062565b915061281783612062565b925082612827576128266127d2565b5b828204905092915050565b7f496e76616c6964206d696c6573746f6e65207374617465000000000000000000600082015250565b60006128686017836125f3565b915061287382612832565b602082019050919050565b600060208201905081810360008301526128978161285b565b9050919050565b60006128a982612062565b91506128b483612062565b92508282039050818111156128cc576128cb612761565b5b92915050565b60006128dd82612062565b91506128e883612062565b9250828201905080821115612900576128ff612761565b5b92915050565b7f496e73756666696369656e7420636f6e74726163742062616c616e6365000000600082015250565b600061293c601d836125f3565b915061294782612906565b602082019050919050565b6000602082019050818103600083015261296b8161292f565b9050919050565b7f496e76616c696420666163746f72792061646472657373000000000000000000600082015250565b60006129a86017836125f3565b91506129b382612972565b602082019050919050565b600060208201905081810360008301526129d78161299b565b9050919050565b60006129e982612062565b9150600082036129fc576129fb612761565b5b600182039050919050565b6000604082019050612a1c600083018561220f565b612a296020830184612200565b9392505050565b600081905092915050565b50565b6000612a4b600083612a30565b9150612a5682612a3b565b600082019050919050565b6000612a6c82612a3e565b9150819050919050565b6000606082019050612a8b600083018661220f565b612a98602083018561220f565b612aa5604083018461220f565b949350505050565b600082905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680612aff57607f821691505b602082108103612b1257612b11612ab8565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302612b7a7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82612b3d565b612b848683612b3d565b95508019841693508086168417925050509392505050565b6000612bb7612bb2612bad84612062565b6120e5565b612062565b9050919050565b6000819050919050565b612bd183612b9c565b612be5612bdd82612bbe565b848454612b4a565b825550505050565b600090565b612bfa612bed565b612c05818484612bc8565b505050565b5b81811015612c2957612c1e600082612bf2565b600181019050612c0b565b5050565b601f821115612c6e57612c3f81612b18565b612c4884612b2d565b81016020851015612c57578190505b612c6b612c6385612b2d565b830182612c0a565b50505b505050565b600082821c905092915050565b6000612c9160001984600802612c73565b1980831691505092915050565b6000612caa8383612c80565b9150826002028217905092915050565b612cc48383612aad565b67ffffffffffffffff811115612cdd57612cdc612474565b5b612ce78254612ae7565b612cf2828285612c2d565b6000601f831160018114612d215760008415612d0f578287013590505b612d198582612c9e565b865550612d81565b601f198416612d2f86612b18565b60005b82811015612d5757848901358255600182019150602085019450602081019050612d32565b86831015612d745784890135612d70601f891682612c80565b8355505b6001600288020188555050505b50505050505050565b6000819050919050565b600067ffffffffffffffff82169050919050565b6000612dc3612dbe612db984612d8a565b6120e5565b612d94565b9050919050565b612dd381612da8565b82525050565b6000602082019050612dee6000830184612dca565b92915050565b6000612dff82612062565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612e3157612e30612761565b5b600182019050919050565b6000604082019050612e516000830185612200565b612e5e602083018461220f565b9392505050565b7f4e6f206d696c6573746f6e652065786973747300000000000000000000000000600082015250565b6000612e9b6013836125f3565b9150612ea682612e65565b602082019050919050565b60006020820190508181036000830152612eca81612e8e565b9050919050565b60008154612ede81612ae7565b612ee881866125f3565b94506001821660008114612f035760018114612f1957612f4c565b60ff198316865281151560200286019350612f4c565b612f2285612b18565b60005b83811015612f4457815481890152600182019150602081019050612f25565b808801955050505b50505092915050565b6000608082019050612f6a60008301876121d6565b612f77602083018661220f565b612f84604083018561220f565b8181036060830152612f968184612ed1565b905095945050505050565b6000606082019050612fb660008301866126cf565b8181036020830152612fc88185612ed1565b9050612fd7604083018461220f565b949350505050565b7f456d707479206d696c6573746f6e652043494400000000000000000000000000600082015250565b60006130156013836125f3565b915061302082612fdf565b602082019050919050565b6000602082019050818103600083015261304481613008565b9050919050565b613054826125e8565b67ffffffffffffffff81111561306d5761306c612474565b5b6130778254612ae7565b613082828285612c2d565b600060209050601f8311600181146130b557600084156130a3578287015190505b6130ad8582612c9e565b865550613115565b601f1984166130c386612b18565b60005b828110156130eb578489015182556001820191506020850194506020810190506130c6565b868310156131085784890151613104601f891682612c80565b8355505b6001600288020188555050505b505050505050565b6000606082019050613132600083018661220f565b61313f602083018561220f565b8181036040830152613151818461262e565b9050949350505050565b60006040820190508181036000830152613175818561262e565b9050613184602083018461220f565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052605160045260246000fdfea264697066735822122019877576ab1cefc49b85c4c9bad8f588863074d9c4e7cef57780251887ca5f3264736f6c63430008180033",
  "deployedBytecode": "0x6080604052600436106100ec5760003560e01c80636eefa2dd1161008a578063bf2928a611610059578063bf2928a6146102ab578063ca0cdea8146102c2578063e0ae1b73146102ff578063e89e4ed614610328576100f3565b80636eefa2dd14610221578063858b85b31461022b5780638b7afe2e14610257578063ba53619314610282576100f3565b8063294b23a2116100c6578063294b23a2146101895780633bc47fbe146101a057806341cf938a146101cb578063561cf2ab146101f8576100f3565b80630b228b30146100f85780630df7215914610121578063205db2371461014c576100f3565b366100f357005b600080fd5b34801561010457600080fd5b5061011f600480360381019061011a9190612098565b61036a565b005b34801561012d57600080fd5b50610136610436565b6040516101439190612144565b60405180910390f35b34801561015857600080fd5b50610173600480360381019061016e919061219d565b61045c565b60405161018091906121e5565b60405180910390f35b34801561019557600080fd5b5061019e6104df565b005b3480156101ac57600080fd5b506101b5610ad7565b6040516101c291906121e5565b60405180910390f35b3480156101d757600080fd5b506101e0610aea565b6040516101ef9392919061221e565b60405180910390f35b34801561020457600080fd5b5061021f600480360381019061021a91906122df565b610b21565b005b610229610dcd565b005b34801561023757600080fd5b506102406110a2565b60405161024e9291906123c1565b60405180910390f35b34801561026357600080fd5b5061026c6110d1565b60405161027991906123ea565b60405180910390f35b34801561028e57600080fd5b506102a960048036038101906102a49190612431565b6110d9565b005b3480156102b757600080fd5b506102c0611464565b005b3480156102ce57600080fd5b506102e960048036038101906102e4919061219d565b6119dc565b6040516102f691906123ea565b60405180910390f35b34801561030b57600080fd5b506103266004803603810190610321919061259f565b6119f4565b005b34801561033457600080fd5b5061034f600480360381019061034a9190612098565b611ca1565b604051610361969594939291906126de565b60405180910390f35b3360018054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146103f0576040517f3926793000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600654821161042b576040517f152a828800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b816006819055505050565b600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600f6000600954815260200190815260200160002090508060060160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16156104d45760019150506104da565b60009150505b919050565b6104e7611d7f565b6000600e60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600a549050600047905060008303610571576040517f93e9fd3000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600382106105b657336040517f3783cd4d0000000000000000000000000000000000000000000000000000000081526004016105ad9190612746565b60405180910390fd5b60008083036105cf57670de0b6b3a76400009050610660565b600183036105ff576003670de0b6b3a764000060026105ee9190612790565b6105f89190612801565b905061065f565b60028303610623576003670de0b6b3a764000061061c9190612801565b905061065e565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106559061287e565b60405180910390fd5b5b5b6000670de0b6b3a764000082866106779190612790565b6106819190612801565b9050600060646014836106949190612790565b61069e9190612801565b9050600081836106ae919061289e565b905081816106bc91906128d2565b8510156106fe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106f590612952565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff160361078f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610786906129be565b60405180910390fd5b6000600e60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600860008154809291906107e7906129de565b919050555082600c60008282546107fe91906128d2565b925050819055506108446040518060400160405280600a81526020017f54617820616d6f756e740000000000000000000000000000000000000000000081525083611dc5565b600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639730b30588336040518363ffffffff1660e01b81526004016108a1929190612a07565b600060405180830381600087803b1580156108bb57600080fd5b505af11580156108cf573d6000803e3d6000fd5b5050505060003373ffffffffffffffffffffffffffffffffffffffff16826040516108f990612a61565b60006040518083038185875af1925050503d8060008114610936576040519150601f19603f3d011682016040523d82523d6000602084013e61093b565b606091505b505090508061098157816040517f3d1da17800000000000000000000000000000000000000000000000000000000815260040161097891906123ea565b60405180910390fd5b6000831115610a5c576000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16846040516109d290612a61565b60006040518083038185875af1925050503d8060008114610a0f576040519150601f19603f3d011682016040523d82523d6000602084013e610a14565b606091505b5050905080610a5a57836040517f3d1da178000000000000000000000000000000000000000000000000000000008152600401610a5191906123ea565b60405180910390fd5b505b3373ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff167fc365391df9733b3e962663112aeb7afcaf43165ec1762b3aa5d3d74a459c259d848b42604051610abd93929190612a76565b60405180910390a35050505050505050610ad5611e61565b565b600160009054906101000a900460ff1681565b600080600060018054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600654600554925092509250909192565b6000610b2b611e6b565b905060008160000160089054906101000a900460ff1615905060008260000160009054906101000a900467ffffffffffffffff1690506000808267ffffffffffffffff16148015610b795750825b9050600060018367ffffffffffffffff16148015610bae575060003073ffffffffffffffffffffffffffffffffffffffff163b145b905081158015610bbc575080155b15610bf3576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60018560000160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055508315610c435760018560000160086101000a81548160ff0219169083151502179055505b8d8d60049182610c54929190612cba565b508b8b60039182610c66929190612cba565b5089600260146101000a81548160ff02191690836008811115610c8c57610c8b612667565b5b0217905550876006819055508860058190555086600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550326001806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555085600d60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508315610dbd5760008560000160086101000a81548160ff0219169083151502179055507fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d26001604051610db49190612dd9565b60405180910390a15b5050505050505050505050505050565b610dd5611d7f565b600160009054906101000a900460ff1615610e1c576040517f01342aee00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6006544210610e57576040517f01342aee00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6003600b5410610e93576040517f01342aee00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600034905060008103610ed2576040517f356680b700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600e60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205403610f325760086000815480929190610f2c90612df4565b91905055505b80600e60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610f8191906128d2565b925050819055508060076000828254610f9a91906128d2565b92505081905550600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1933836040518363ffffffff1660e01b8152600401610ffe929190612e3c565b600060405180830381600087803b15801561101857600080fd5b505af115801561102c573d6000803e3d6000fd5b505050503073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fd1c1ab18b883285500514418a94e5e9f65b62e92bfd2f9bae6845c186839d7b4834260405161108f9291906123c1565b60405180910390a3506110a0611e61565b565b6000806000600f6000600954815260200190815260200160002090508060040154816005015492509250509091565b600047905090565b6110e1611d7f565b600160009054906101000a900460ff1615611128576040517f85b1d52800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006009540361116d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161116490612eb1565b60405180910390fd5b6000600f6000600954815260200190815260200160002090506001600381111561119a57611199612667565b5b8160030160009054906101000a900460ff1660038111156111be576111bd612667565b5b1461120057336040517f687ac16f0000000000000000000000000000000000000000000000000000000081526004016111f79190612746565b60405180910390fd5b806002015442111561123e576040517fceb9473500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600e60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600081036112bc576040517f93e9fd3000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8160060160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161561134d57336040517fe984dbfb0000000000000000000000000000000000000000000000000000000081526004016113449190612746565b60405180910390fd5b60018260060160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555082156113cd57808260040160008282546113c191906128d2565b925050819055506113e9565b808260050160008282546113e191906128d2565b925050819055505b3073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f835ab76283d31bbb9aef85ac068b9fb59cfef2cf1ae599c0e2388bc23fec43828584428760000160405161144f9493929190612f55565b60405180910390a35050611461611e61565b50565b61146c611d7f565b3360018054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146114f2576040517f3926793000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600b5490506000479050600060095490506000600f6000838152602001908152602001600020905060038410611556576040517f0df8303500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600654421015611592576040517ff6154cc600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000841480156115a25750600182145b156116315760018160010160006101000a81548160ff02191690831515021790555060028160030160006101000a81548160ff021916908360038111156115ec576115eb612667565b5b0217905550600a600081548092919060010191905055506001600b81905550600060038461161a9190612801565b9050611627816000611e93565b50505050506119d1565b806002015442101561166f576040517f9fc29f9d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600381111561168357611682612667565b5b8160030160009054906101000a900460ff1660038111156116a7576116a6612667565b5b146116de576040517f8394b0f900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600081600401549050600082600501549050600081836116fe91906128d2565b905060008082036117125760019050611749565b606460036002846117239190612790565b61172d9190612801565b6117379190612790565b6064856117449190612790565b101590505b8061180b5760038560030160006101000a81548160ff0219169083600381111561177657611775612667565b5b021790555060008560010160006101000a81548160ff0219169083151502179055503073ffffffffffffffffffffffffffffffffffffffff167f347bdd1056464d68f105c00d8b42002855fff0045b252566b313350f53f802798660030160009054906101000a900460ff1687600001426040516117f693929190612fa1565b60405180910390a250505050505050506119d1565b60028560030160006101000a81548160ff0219169083600381111561183357611832612667565b5b021790555060018560010160006101000a81548160ff021916908315150217905550600a60008154809291906001019190505550600b600081548092919060010191905055503073ffffffffffffffffffffffffffffffffffffffff167f347bdd1056464d68f105c00d8b42002855fff0045b252566b313350f53f802798660030160009054906101000a900460ff1687600001426040516118d793929190612fa1565b60405180910390a260008060018a0361193057670de0b6b3a76400006003670de0b6b3a764000060028c61190b9190612790565b6119159190612790565b61191f9190612801565b6119299190612801565b91506119b1565b60648961193d9190612801565b9050808961194b919061289e565b9150600081111561196257611961816001611e93565b5b3073ffffffffffffffffffffffffffffffffffffffff167fe8c6942b5fd4851c5d5f3928293eae5a0a0228eb48886d99b62886dfe573e7cb426040516119a891906123ea565b60405180910390a25b60008211156119c6576119c5826000611e93565b5b505050505050505050505b506119da611e61565b565b600e6020528060005260406000206000915090505481565b3360018054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614611a7a576040517f3926793000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611a82611d7f565b6000825111611ac6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611abd9061302b565b60405180910390fd5b60016003811115611ada57611ad9612667565b5b600f6000600954815260200190815260200160002060030160009054906101000a900460ff166003811115611b1257611b11612667565b5b03611b49576040517fcd2fad3a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6003600b5410611b85576040517fe040d7f600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006001600954611b9691906128d2565b90506000600f6000838152602001908152602001600020905060018160030160006101000a81548160ff02191690836003811115611bd757611bd6612667565b5b021790555083816000019081611bed919061304b565b5060008160010160006101000a81548160ff0219169083151502179055506212750042611c1a91906128d2565b81600201819055506000816004018190555060008160050181905550816009819055503373ffffffffffffffffffffffffffffffffffffffff167f224ac17b3eb418fb512ed55f6ddb93018074c71f4ad405edb692c5c343b3680142836002015487604051611c8b9392919061311d565b60405180910390a25050611c9d611e61565b5050565b600f602052806000526040600020600091509050806000018054611cc490612ae7565b80601f0160208091040260200160405190810160405280929190818152602001828054611cf090612ae7565b8015611d3d5780601f10611d1257610100808354040283529160200191611d3d565b820191906000526020600020905b815481529060010190602001808311611d2057829003601f168201915b5050505050908060010160009054906101000a900460ff16908060020154908060030160009054906101000a900460ff16908060040154908060050154905086565b600260005403611dbb576040517f3ee5aeb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002600081905550565b611e5d8282604051602401611ddb92919061315b565b6040516020818303038152906040527fb60e72cc000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611ffe565b5050565b6001600081905550565b60007ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00905090565b600081611ea05733611ec4565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff165b905060008173ffffffffffffffffffffffffffffffffffffffff1684604051611eec90612a61565b60006040518083038185875af1925050503d8060008114611f29576040519150601f19603f3d011682016040523d82523d6000602084013e611f2e565b606091505b5050905080611f7457836040517f3d1da178000000000000000000000000000000000000000000000000000000008152600401611f6b91906123ea565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611ff8573373ffffffffffffffffffffffffffffffffffffffff167f39315d2beee6219c433f330272de1e8249029171e201a0b7d188c5942d5ca1fe8542604051611fef9291906123c1565b60405180910390a25b50505050565b6120158161200d612018612039565b63ffffffff16565b50565b60006a636f6e736f6c652e6c6f679050600080835160208501845afa505050565b612044819050919050565b61204c61318b565b565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b61207581612062565b811461208057600080fd5b50565b6000813590506120928161206c565b92915050565b6000602082840312156120ae576120ad612058565b5b60006120bc84828501612083565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061210a612105612100846120c5565b6120e5565b6120c5565b9050919050565b600061211c826120ef565b9050919050565b600061212e82612111565b9050919050565b61213e81612123565b82525050565b60006020820190506121596000830184612135565b92915050565b600061216a826120c5565b9050919050565b61217a8161215f565b811461218557600080fd5b50565b60008135905061219781612171565b92915050565b6000602082840312156121b3576121b2612058565b5b60006121c184828501612188565b91505092915050565b60008115159050919050565b6121df816121ca565b82525050565b60006020820190506121fa60008301846121d6565b92915050565b6122098161215f565b82525050565b61221881612062565b82525050565b60006060820190506122336000830186612200565b612240602083018561220f565b61224d604083018461220f565b949350505050565b600080fd5b600080fd5b600080fd5b60008083601f84011261227a57612279612255565b5b8235905067ffffffffffffffff8111156122975761229661225a565b5b6020830191508360018202830111156122b3576122b261225f565b5b9250929050565b600981106122c757600080fd5b50565b6000813590506122d9816122ba565b92915050565b600080600080600080600080600060e08a8c03121561230157612300612058565b5b60008a013567ffffffffffffffff81111561231f5761231e61205d565b5b61232b8c828d01612264565b995099505060208a013567ffffffffffffffff81111561234e5761234d61205d565b5b61235a8c828d01612264565b9750975050604061236d8c828d016122ca565b955050606061237e8c828d01612083565b945050608061238f8c828d01612083565b93505060a06123a08c828d01612188565b92505060c06123b18c828d01612188565b9150509295985092959850929598565b60006040820190506123d6600083018561220f565b6123e3602083018461220f565b9392505050565b60006020820190506123ff600083018461220f565b92915050565b61240e816121ca565b811461241957600080fd5b50565b60008135905061242b81612405565b92915050565b60006020828403121561244757612446612058565b5b60006124558482850161241c565b91505092915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6124ac82612463565b810181811067ffffffffffffffff821117156124cb576124ca612474565b5b80604052505050565b60006124de61204e565b90506124ea82826124a3565b919050565b600067ffffffffffffffff82111561250a57612509612474565b5b61251382612463565b9050602081019050919050565b82818337600083830152505050565b600061254261253d846124ef565b6124d4565b90508281526020810184848401111561255e5761255d61245e565b5b612569848285612520565b509392505050565b600082601f83011261258657612585612255565b5b813561259684826020860161252f565b91505092915050565b6000602082840312156125b5576125b4612058565b5b600082013567ffffffffffffffff8111156125d3576125d261205d565b5b6125df84828501612571565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015612622578082015181840152602081019050612607565b60008484015250505050565b6000612639826125e8565b61264381856125f3565b9350612653818560208601612604565b61265c81612463565b840191505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600481106126a7576126a6612667565b5b50565b60008190506126b882612696565b919050565b60006126c8826126aa565b9050919050565b6126d8816126bd565b82525050565b600060c08201905081810360008301526126f8818961262e565b905061270760208301886121d6565b612714604083018761220f565b61272160608301866126cf565b61272e608083018561220f565b61273b60a083018461220f565b979650505050505050565b600060208201905061275b6000830184612200565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061279b82612062565b91506127a683612062565b92508282026127b481612062565b915082820484148315176127cb576127ca612761565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061280c82612062565b915061281783612062565b925082612827576128266127d2565b5b828204905092915050565b7f496e76616c6964206d696c6573746f6e65207374617465000000000000000000600082015250565b60006128686017836125f3565b915061287382612832565b602082019050919050565b600060208201905081810360008301526128978161285b565b9050919050565b60006128a982612062565b91506128b483612062565b92508282039050818111156128cc576128cb612761565b5b92915050565b60006128dd82612062565b91506128e883612062565b9250828201905080821115612900576128ff612761565b5b92915050565b7f496e73756666696369656e7420636f6e74726163742062616c616e6365000000600082015250565b600061293c601d836125f3565b915061294782612906565b602082019050919050565b6000602082019050818103600083015261296b8161292f565b9050919050565b7f496e76616c696420666163746f72792061646472657373000000000000000000600082015250565b60006129a86017836125f3565b91506129b382612972565b602082019050919050565b600060208201905081810360008301526129d78161299b565b9050919050565b60006129e982612062565b9150600082036129fc576129fb612761565b5b600182039050919050565b6000604082019050612a1c600083018561220f565b612a296020830184612200565b9392505050565b600081905092915050565b50565b6000612a4b600083612a30565b9150612a5682612a3b565b600082019050919050565b6000612a6c82612a3e565b9150819050919050565b6000606082019050612a8b600083018661220f565b612a98602083018561220f565b612aa5604083018461220f565b949350505050565b600082905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680612aff57607f821691505b602082108103612b1257612b11612ab8565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302612b7a7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82612b3d565b612b848683612b3d565b95508019841693508086168417925050509392505050565b6000612bb7612bb2612bad84612062565b6120e5565b612062565b9050919050565b6000819050919050565b612bd183612b9c565b612be5612bdd82612bbe565b848454612b4a565b825550505050565b600090565b612bfa612bed565b612c05818484612bc8565b505050565b5b81811015612c2957612c1e600082612bf2565b600181019050612c0b565b5050565b601f821115612c6e57612c3f81612b18565b612c4884612b2d565b81016020851015612c57578190505b612c6b612c6385612b2d565b830182612c0a565b50505b505050565b600082821c905092915050565b6000612c9160001984600802612c73565b1980831691505092915050565b6000612caa8383612c80565b9150826002028217905092915050565b612cc48383612aad565b67ffffffffffffffff811115612cdd57612cdc612474565b5b612ce78254612ae7565b612cf2828285612c2d565b6000601f831160018114612d215760008415612d0f578287013590505b612d198582612c9e565b865550612d81565b601f198416612d2f86612b18565b60005b82811015612d5757848901358255600182019150602085019450602081019050612d32565b86831015612d745784890135612d70601f891682612c80565b8355505b6001600288020188555050505b50505050505050565b6000819050919050565b600067ffffffffffffffff82169050919050565b6000612dc3612dbe612db984612d8a565b6120e5565b612d94565b9050919050565b612dd381612da8565b82525050565b6000602082019050612dee6000830184612dca565b92915050565b6000612dff82612062565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612e3157612e30612761565b5b600182019050919050565b6000604082019050612e516000830185612200565b612e5e602083018461220f565b9392505050565b7f4e6f206d696c6573746f6e652065786973747300000000000000000000000000600082015250565b6000612e9b6013836125f3565b9150612ea682612e65565b602082019050919050565b60006020820190508181036000830152612eca81612e8e565b9050919050565b60008154612ede81612ae7565b612ee881866125f3565b94506001821660008114612f035760018114612f1957612f4c565b60ff198316865281151560200286019350612f4c565b612f2285612b18565b60005b83811015612f4457815481890152600182019150602081019050612f25565b808801955050505b50505092915050565b6000608082019050612f6a60008301876121d6565b612f77602083018661220f565b612f84604083018561220f565b8181036060830152612f968184612ed1565b905095945050505050565b6000606082019050612fb660008301866126cf565b8181036020830152612fc88185612ed1565b9050612fd7604083018461220f565b949350505050565b7f456d707479206d696c6573746f6e652043494400000000000000000000000000600082015250565b60006130156013836125f3565b915061302082612fdf565b602082019050919050565b6000602082019050818103600083015261304481613008565b9050919050565b613054826125e8565b67ffffffffffffffff81111561306d5761306c612474565b5b6130778254612ae7565b613082828285612c2d565b600060209050601f8311600181146130b557600084156130a3578287015190505b6130ad8582612c9e565b865550613115565b601f1984166130c386612b18565b60005b828110156130eb578489015182556001820191506020850194506020810190506130c6565b868310156131085784890151613104601f891682612c80565b8355505b6001600288020188555050505b505050505050565b6000606082019050613132600083018661220f565b61313f602083018561220f565b8181036040830152613151818461262e565b9050949350505050565b60006040820190508181036000830152613175818561262e565b9050613184602083018461220f565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052605160045260246000fdfea264697066735822122019877576ab1cefc49b85c4c9bad8f588863074d9c4e7cef57780251887ca5f3264736f6c63430008180033",
  "devdoc": {
    "details": "Main contract for crowdfunding campaigns",
    "errors": {
      "InvalidInitialization()": [
        {
          "details": "The contract is already initialized."
        }
      ],
      "NotInitializing()": [
        {
          "details": "The contract is not initializing."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ]
    },
    "events": {
      "Initialized(uint64)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      }
    },
    "kind": "dev",
    "methods": {
      "giveDonationToCause()": {
        "custom:security": "non-reentrant",
        "details": "Emits UserDonatedToProject event on successful donation"
      },
      "retrieveDonatedAmount()": {
        "details": "Implements checks-effects-interactions pattern and includes withdrawal penalties based on milestone progress"
      },
      "voteOnMilestone(bool)": {
        "details": "Votes are weighted by donation amount",
        "params": {
          "support": "True for supporting the milestone, false for opposing"
        }
      }
    },
    "title": "CrowdFunding",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "giveDonationToCause()": {
        "notice": "Allows users to donate funds to the campaign"
      },
      "retrieveDonatedAmount()": {
        "notice": "Allows donors to withdraw their donations with a withdrawal fee"
      },
      "voteOnMilestone(bool)": {
        "notice": "Allows donors to vote on pending milestones"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1329,
        "contract": "contracts/CrowdFunding.sol:CrowdFunding",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 1542,
        "contract": "contracts/CrowdFunding.sol:CrowdFunding",
        "label": "campaignEnded",
        "offset": 0,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 1544,
        "contract": "contracts/CrowdFunding.sol:CrowdFunding",
        "label": "campaignOwner",
        "offset": 1,
        "slot": "1",
        "type": "t_address_payable"
      },
      {
        "astId": 1546,
        "contract": "contracts/CrowdFunding.sol:CrowdFunding",
        "label": "factoryContractAddress",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 1549,
        "contract": "contracts/CrowdFunding.sol:CrowdFunding",
        "label": "category",
        "offset": 20,
        "slot": "2",
        "type": "t_enum(Category)1604"
      },
      {
        "astId": 1551,
        "contract": "contracts/CrowdFunding.sol:CrowdFunding",
        "label": "title",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 1553,
        "contract": "contracts/CrowdFunding.sol:CrowdFunding",
        "label": "contractDetailsId",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 1555,
        "contract": "contracts/CrowdFunding.sol:CrowdFunding",
        "label": "targetAmount",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 1557,
        "contract": "contracts/CrowdFunding.sol:CrowdFunding",
        "label": "campaignDuration",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 1559,
        "contract": "contracts/CrowdFunding.sol:CrowdFunding",
        "label": "amountDonated",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 1561,
        "contract": "contracts/CrowdFunding.sol:CrowdFunding",
        "label": "numberOfDonors",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 1563,
        "contract": "contracts/CrowdFunding.sol:CrowdFunding",
        "label": "milestoneCounter",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 1565,
        "contract": "contracts/CrowdFunding.sol:CrowdFunding",
        "label": "approvedMilestone",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 1567,
        "contract": "contracts/CrowdFunding.sol:CrowdFunding",
        "label": "numberOfWithdrawal",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 1569,
        "contract": "contracts/CrowdFunding.sol:CrowdFunding",
        "label": "amountRecalledByDonor",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 1580,
        "contract": "contracts/CrowdFunding.sol:CrowdFunding",
        "label": "donationToken",
        "offset": 0,
        "slot": "13",
        "type": "t_contract(CrowdFundingToken)3208"
      },
      {
        "astId": 1584,
        "contract": "contracts/CrowdFunding.sol:CrowdFunding",
        "label": "donors",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1589,
        "contract": "contracts/CrowdFunding.sol:CrowdFunding",
        "label": "milestones",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_uint256,t_struct(Milestone)1417_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(CrowdFundingToken)3208": {
        "encoding": "inplace",
        "label": "contract CrowdFundingToken",
        "numberOfBytes": "20"
      },
      "t_enum(Category)1604": {
        "encoding": "inplace",
        "label": "enum CrowdFunding.Category",
        "numberOfBytes": "1"
      },
      "t_enum(MilestoneStatus)1594": {
        "encoding": "inplace",
        "label": "enum CrowdFunding.MilestoneStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(Milestone)1417_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct CrowdFunding.Milestone)",
        "numberOfBytes": "32",
        "value": "t_struct(Milestone)1417_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Milestone)1417_storage": {
        "encoding": "inplace",
        "label": "struct CrowdFunding.Milestone",
        "members": [
          {
            "astId": 1401,
            "contract": "contracts/CrowdFunding.sol:CrowdFunding",
            "label": "milestoneCID",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 1403,
            "contract": "contracts/CrowdFunding.sol:CrowdFunding",
            "label": "approved",
            "offset": 0,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 1405,
            "contract": "contracts/CrowdFunding.sol:CrowdFunding",
            "label": "votingPeriod",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1408,
            "contract": "contracts/CrowdFunding.sol:CrowdFunding",
            "label": "status",
            "offset": 0,
            "slot": "3",
            "type": "t_enum(MilestoneStatus)1594"
          },
          {
            "astId": 1410,
            "contract": "contracts/CrowdFunding.sol:CrowdFunding",
            "label": "supportVote",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 1412,
            "contract": "contracts/CrowdFunding.sol:CrowdFunding",
            "label": "againstVote",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 1416,
            "contract": "contracts/CrowdFunding.sol:CrowdFunding",
            "label": "hasVoted",
            "offset": 0,
            "slot": "6",
            "type": "t_mapping(t_address,t_bool)"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}